// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cfg-x-msg-oss.proto

#include "cfg-x-msg-oss.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class XmsgOssCfgPbDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgOssCfgPb>
      _instance;
} _XmsgOssCfgPb_default_instance_;
class XmsgOssCfgMongodbDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgOssCfgMongodb>
      _instance;
} _XmsgOssCfgMongodb_default_instance_;
class XmsgOssCfgMysqlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgOssCfgMysql>
      _instance;
} _XmsgOssCfgMysql_default_instance_;
class XmsgOssCfgLogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgOssCfgLog>
      _instance;
} _XmsgOssCfgLog_default_instance_;
class XmsgOssCfgXscTcpServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgOssCfgXscTcpServer>
      _instance;
} _XmsgOssCfgXscTcpServer_default_instance_;
class XmsgOssCfgXscHttpServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgOssCfgXscHttpServer>
      _instance;
} _XmsgOssCfgXscHttpServer_default_instance_;
class XmsgOssCfgXmsgNeH2nAddrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgOssCfgXmsgNeH2nAddr>
      _instance;
} _XmsgOssCfgXmsgNeH2nAddr_default_instance_;
class XmsgOssCfgXmsgNeN2hAddrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgOssCfgXmsgNeN2hAddr>
      _instance;
} _XmsgOssCfgXmsgNeN2hAddr_default_instance_;
class XmsgOssCfgMiscDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgOssCfgMisc>
      _instance;
} _XmsgOssCfgMisc_default_instance_;
namespace protobuf_cfg_2dx_2dmsg_2doss_2eproto {
void InitDefaultsXmsgOssCfgPbImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgMongodb();
  protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgMysql();
  protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgLog();
  protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgXscHttpServer();
  protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgXscTcpServer();
  protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgXmsgNeH2nAddr();
  protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgXmsgNeN2hAddr();
  protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgMisc();
  {
    void* ptr = &::_XmsgOssCfgPb_default_instance_;
    new (ptr) ::XmsgOssCfgPb();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgOssCfgPb::InitAsDefaultInstance();
}

void InitDefaultsXmsgOssCfgPb() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgOssCfgPbImpl);
}

void InitDefaultsXmsgOssCfgMongodbImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgOssCfgMongodb_default_instance_;
    new (ptr) ::XmsgOssCfgMongodb();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgOssCfgMongodb::InitAsDefaultInstance();
}

void InitDefaultsXmsgOssCfgMongodb() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgOssCfgMongodbImpl);
}

void InitDefaultsXmsgOssCfgMysqlImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgOssCfgMysql_default_instance_;
    new (ptr) ::XmsgOssCfgMysql();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgOssCfgMysql::InitAsDefaultInstance();
}

void InitDefaultsXmsgOssCfgMysql() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgOssCfgMysqlImpl);
}

void InitDefaultsXmsgOssCfgLogImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgOssCfgLog_default_instance_;
    new (ptr) ::XmsgOssCfgLog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgOssCfgLog::InitAsDefaultInstance();
}

void InitDefaultsXmsgOssCfgLog() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgOssCfgLogImpl);
}

void InitDefaultsXmsgOssCfgXscTcpServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgOssCfgXscTcpServer_default_instance_;
    new (ptr) ::XmsgOssCfgXscTcpServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgOssCfgXscTcpServer::InitAsDefaultInstance();
}

void InitDefaultsXmsgOssCfgXscTcpServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgOssCfgXscTcpServerImpl);
}

void InitDefaultsXmsgOssCfgXscHttpServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgXscTcpServer();
  {
    void* ptr = &::_XmsgOssCfgXscHttpServer_default_instance_;
    new (ptr) ::XmsgOssCfgXscHttpServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgOssCfgXscHttpServer::InitAsDefaultInstance();
}

void InitDefaultsXmsgOssCfgXscHttpServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgOssCfgXscHttpServerImpl);
}

void InitDefaultsXmsgOssCfgXmsgNeH2nAddrImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgOssCfgXmsgNeH2nAddr_default_instance_;
    new (ptr) ::XmsgOssCfgXmsgNeH2nAddr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgOssCfgXmsgNeH2nAddr::InitAsDefaultInstance();
}

void InitDefaultsXmsgOssCfgXmsgNeH2nAddr() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgOssCfgXmsgNeH2nAddrImpl);
}

void InitDefaultsXmsgOssCfgXmsgNeN2hAddrImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgOssCfgXmsgNeN2hAddr_default_instance_;
    new (ptr) ::XmsgOssCfgXmsgNeN2hAddr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgOssCfgXmsgNeN2hAddr::InitAsDefaultInstance();
}

void InitDefaultsXmsgOssCfgXmsgNeN2hAddr() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgOssCfgXmsgNeN2hAddrImpl);
}

void InitDefaultsXmsgOssCfgMiscImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgOssCfgMisc_default_instance_;
    new (ptr) ::XmsgOssCfgMisc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgOssCfgMisc::InitAsDefaultInstance();
}

void InitDefaultsXmsgOssCfgMisc() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgOssCfgMiscImpl);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgPb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgPb, cgt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgPb, cfgtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgPb, mongodb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgPb, mysql_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgPb, log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgPb, pubhttp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgPb, pritcp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgPb, h2n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgPb, n2h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgPb, misc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgMongodb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgMongodb, uri_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgMysql, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgMysql, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgMysql, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgMysql, db_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgMysql, usr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgMysql, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgMysql, poolsize_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgLog, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgLog, output_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXscTcpServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXscTcpServer, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXscTcpServer, worker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXscTcpServer, peerlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXscTcpServer, peermtu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXscTcpServer, peerrcvbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXscTcpServer, peersndbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXscTcpServer, lazyclose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXscTcpServer, tracing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXscTcpServer, heartbeat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXscTcpServer, n2hzombie_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXscTcpServer, n2htranstimeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXscTcpServer, n2htracing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXscTcpServer, h2nreconn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXscTcpServer, h2ntranstimeout_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXscHttpServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXscHttpServer, tcp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXscHttpServer, headerlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXscHttpServer, bodylimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXscHttpServer, closewait_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXscHttpServer, requiredheader_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXmsgNeH2nAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXmsgNeH2nAddr, neg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXmsgNeH2nAddr, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXmsgNeH2nAddr, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXmsgNeH2nAddr, alg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXmsgNeH2nAddr, redundant_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXmsgNeN2hAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXmsgNeN2hAddr, neg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXmsgNeN2hAddr, cgt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXmsgNeN2hAddr, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgXmsgNeN2hAddr, addr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgMisc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgMisc, storage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgMisc, ipfsnode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgMisc, ipfsuploadthread_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgMisc, ipfsdownloadthread_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgMisc, objpath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgMisc, objhashsegment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgMisc, objdownloadthread_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgMisc, objdownloadwritebufsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgMisc, objinfocached_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgOssCfgMisc, objinfolru_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::XmsgOssCfgPb)},
  { 15, -1, sizeof(::XmsgOssCfgMongodb)},
  { 21, -1, sizeof(::XmsgOssCfgMysql)},
  { 32, -1, sizeof(::XmsgOssCfgLog)},
  { 39, -1, sizeof(::XmsgOssCfgXscTcpServer)},
  { 58, -1, sizeof(::XmsgOssCfgXscHttpServer)},
  { 68, -1, sizeof(::XmsgOssCfgXmsgNeH2nAddr)},
  { 78, -1, sizeof(::XmsgOssCfgXmsgNeN2hAddr)},
  { 87, -1, sizeof(::XmsgOssCfgMisc)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgOssCfgPb_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgOssCfgMongodb_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgOssCfgMysql_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgOssCfgLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgOssCfgXscTcpServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgOssCfgXscHttpServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgOssCfgXmsgNeH2nAddr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgOssCfgXmsgNeN2hAddr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgOssCfgMisc_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cfg-x-msg-oss.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023cfg-x-msg-oss.proto\"\320\002\n\014XmsgOssCfgPb\022\013"
      "\n\003cgt\030\001 \001(\t\022\017\n\007cfgType\030\002 \001(\t\022#\n\007mongodb\030"
      "\003 \001(\0132\022.XmsgOssCfgMongodb\022\037\n\005mysql\030\004 \001(\013"
      "2\020.XmsgOssCfgMysql\022\033\n\003log\030\005 \001(\0132\016.XmsgOs"
      "sCfgLog\022)\n\007pubHttp\030\006 \001(\0132\030.XmsgOssCfgXsc"
      "HttpServer\022\'\n\006priTcp\030\007 \001(\0132\027.XmsgOssCfgX"
      "scTcpServer\022%\n\003h2n\030\010 \003(\0132\030.XmsgOssCfgXms"
      "gNeH2nAddr\022%\n\003n2h\030\t \003(\0132\030.XmsgOssCfgXmsg"
      "NeN2hAddr\022\035\n\004misc\030\n \001(\0132\017.XmsgOssCfgMisc"
      "\" \n\021XmsgOssCfgMongodb\022\013\n\003uri\030\001 \001(\t\"j\n\017Xm"
      "sgOssCfgMysql\022\014\n\004host\030\001 \001(\t\022\014\n\004port\030\002 \001("
      "\r\022\n\n\002db\030\003 \001(\t\022\013\n\003usr\030\004 \001(\t\022\020\n\010password\030\005"
      " \001(\t\022\020\n\010poolSize\030\006 \001(\r\".\n\rXmsgOssCfgLog\022"
      "\r\n\005level\030\001 \001(\t\022\016\n\006output\030\002 \001(\t\"\245\002\n\026XmsgO"
      "ssCfgXscTcpServer\022\014\n\004addr\030\001 \001(\t\022\016\n\006worke"
      "r\030\002 \001(\r\022\021\n\tpeerLimit\030\003 \001(\r\022\017\n\007peerMtu\030\004 "
      "\001(\r\022\022\n\npeerRcvBuf\030\005 \001(\r\022\022\n\npeerSndBuf\030\006 "
      "\001(\r\022\021\n\tlazyClose\030\007 \001(\r\022\017\n\007tracing\030\010 \001(\010\022"
      "\021\n\theartbeat\030\t \001(\r\022\021\n\tn2hZombie\030\n \001(\r\022\027\n"
      "\017n2hTransTimeout\030\013 \001(\r\022\022\n\nn2hTracing\030\014 \001"
      "(\010\022\021\n\th2nReConn\030\r \001(\r\022\027\n\017h2nTransTimeout"
      "\030\016 \001(\r\"\222\001\n\027XmsgOssCfgXscHttpServer\022$\n\003tc"
      "p\030\001 \001(\0132\027.XmsgOssCfgXscTcpServer\022\023\n\013head"
      "erLimit\030\002 \001(\r\022\021\n\tbodyLimit\030\003 \001(\r\022\021\n\tclos"
      "eWait\030\004 \001(\r\022\026\n\016requiredHeader\030\005 \003(\t\"a\n\027X"
      "msgOssCfgXmsgNeH2nAddr\022\013\n\003neg\030\001 \001(\t\022\014\n\004a"
      "ddr\030\002 \001(\t\022\013\n\003pwd\030\003 \001(\t\022\013\n\003alg\030\004 \001(\t\022\021\n\tr"
      "edundant\030\005 \001(\r\"N\n\027XmsgOssCfgXmsgNeN2hAdd"
      "r\022\013\n\003neg\030\001 \001(\t\022\013\n\003cgt\030\002 \001(\t\022\013\n\003pwd\030\003 \001(\t"
      "\022\014\n\004addr\030\004 \001(\t\"\216\002\n\016XmsgOssCfgMisc\022$\n\007sto"
      "rage\030\007 \001(\0162\023.XmsgOssStorageType\022\020\n\010ipfsN"
      "ode\030\010 \001(\t\022\030\n\020ipfsUploadThread\030\t \001(\r\022\032\n\022i"
      "pfsDownloadThread\030\n \001(\r\022\017\n\007objPath\030\001 \001(\t"
      "\022\026\n\016objHashSegment\030\002 \001(\r\022\031\n\021objDownloadT"
      "hread\030\003 \001(\r\022\037\n\027objDownloadWriteBufSize\030\006"
      " \001(\r\022\025\n\robjInfoCached\030\004 \001(\r\022\022\n\nobjInfoLr"
      "u\030\005 \001(\r*V\n\022XmsgOssStorageType\022\037\n\033X_MSG_O"
      "SS_STORAGE_TYPE_DISK\020\000\022\037\n\033X_MSG_OSS_STOR"
      "AGE_TYPE_IPFS\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1543);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cfg-x-msg-oss.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cfg_2dx_2dmsg_2doss_2eproto
const ::google::protobuf::EnumDescriptor* XmsgOssStorageType_descriptor() {
  protobuf_cfg_2dx_2dmsg_2doss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfg_2dx_2dmsg_2doss_2eproto::file_level_enum_descriptors[0];
}
bool XmsgOssStorageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void XmsgOssCfgPb::InitAsDefaultInstance() {
  ::_XmsgOssCfgPb_default_instance_._instance.get_mutable()->mongodb_ = const_cast< ::XmsgOssCfgMongodb*>(
      ::XmsgOssCfgMongodb::internal_default_instance());
  ::_XmsgOssCfgPb_default_instance_._instance.get_mutable()->mysql_ = const_cast< ::XmsgOssCfgMysql*>(
      ::XmsgOssCfgMysql::internal_default_instance());
  ::_XmsgOssCfgPb_default_instance_._instance.get_mutable()->log_ = const_cast< ::XmsgOssCfgLog*>(
      ::XmsgOssCfgLog::internal_default_instance());
  ::_XmsgOssCfgPb_default_instance_._instance.get_mutable()->pubhttp_ = const_cast< ::XmsgOssCfgXscHttpServer*>(
      ::XmsgOssCfgXscHttpServer::internal_default_instance());
  ::_XmsgOssCfgPb_default_instance_._instance.get_mutable()->pritcp_ = const_cast< ::XmsgOssCfgXscTcpServer*>(
      ::XmsgOssCfgXscTcpServer::internal_default_instance());
  ::_XmsgOssCfgPb_default_instance_._instance.get_mutable()->misc_ = const_cast< ::XmsgOssCfgMisc*>(
      ::XmsgOssCfgMisc::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgOssCfgPb::kCgtFieldNumber;
const int XmsgOssCfgPb::kCfgTypeFieldNumber;
const int XmsgOssCfgPb::kMongodbFieldNumber;
const int XmsgOssCfgPb::kMysqlFieldNumber;
const int XmsgOssCfgPb::kLogFieldNumber;
const int XmsgOssCfgPb::kPubHttpFieldNumber;
const int XmsgOssCfgPb::kPriTcpFieldNumber;
const int XmsgOssCfgPb::kH2NFieldNumber;
const int XmsgOssCfgPb::kN2HFieldNumber;
const int XmsgOssCfgPb::kMiscFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgOssCfgPb::XmsgOssCfgPb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgPb();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgOssCfgPb)
}
XmsgOssCfgPb::XmsgOssCfgPb(const XmsgOssCfgPb& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      h2n_(from.h2n_),
      n2h_(from.n2h_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cgt().size() > 0) {
    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  cfgtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cfgtype().size() > 0) {
    cfgtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cfgtype_);
  }
  if (from.has_mongodb()) {
    mongodb_ = new ::XmsgOssCfgMongodb(*from.mongodb_);
  } else {
    mongodb_ = NULL;
  }
  if (from.has_mysql()) {
    mysql_ = new ::XmsgOssCfgMysql(*from.mysql_);
  } else {
    mysql_ = NULL;
  }
  if (from.has_log()) {
    log_ = new ::XmsgOssCfgLog(*from.log_);
  } else {
    log_ = NULL;
  }
  if (from.has_pubhttp()) {
    pubhttp_ = new ::XmsgOssCfgXscHttpServer(*from.pubhttp_);
  } else {
    pubhttp_ = NULL;
  }
  if (from.has_pritcp()) {
    pritcp_ = new ::XmsgOssCfgXscTcpServer(*from.pritcp_);
  } else {
    pritcp_ = NULL;
  }
  if (from.has_misc()) {
    misc_ = new ::XmsgOssCfgMisc(*from.misc_);
  } else {
    misc_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:XmsgOssCfgPb)
}

void XmsgOssCfgPb::SharedCtor() {
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cfgtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mongodb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&misc_) -
      reinterpret_cast<char*>(&mongodb_)) + sizeof(misc_));
  _cached_size_ = 0;
}

XmsgOssCfgPb::~XmsgOssCfgPb() {
  // @@protoc_insertion_point(destructor:XmsgOssCfgPb)
  SharedDtor();
}

void XmsgOssCfgPb::SharedDtor() {
  cgt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cfgtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mongodb_;
  if (this != internal_default_instance()) delete mysql_;
  if (this != internal_default_instance()) delete log_;
  if (this != internal_default_instance()) delete pubhttp_;
  if (this != internal_default_instance()) delete pritcp_;
  if (this != internal_default_instance()) delete misc_;
}

void XmsgOssCfgPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgOssCfgPb::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgOssCfgPb& XmsgOssCfgPb::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgPb();
  return *internal_default_instance();
}

XmsgOssCfgPb* XmsgOssCfgPb::New(::google::protobuf::Arena* arena) const {
  XmsgOssCfgPb* n = new XmsgOssCfgPb;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgOssCfgPb::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgOssCfgPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  h2n_.Clear();
  n2h_.Clear();
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cfgtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && mongodb_ != NULL) {
    delete mongodb_;
  }
  mongodb_ = NULL;
  if (GetArenaNoVirtual() == NULL && mysql_ != NULL) {
    delete mysql_;
  }
  mysql_ = NULL;
  if (GetArenaNoVirtual() == NULL && log_ != NULL) {
    delete log_;
  }
  log_ = NULL;
  if (GetArenaNoVirtual() == NULL && pubhttp_ != NULL) {
    delete pubhttp_;
  }
  pubhttp_ = NULL;
  if (GetArenaNoVirtual() == NULL && pritcp_ != NULL) {
    delete pritcp_;
  }
  pritcp_ = NULL;
  if (GetArenaNoVirtual() == NULL && misc_ != NULL) {
    delete misc_;
  }
  misc_ = NULL;
  _internal_metadata_.Clear();
}

bool XmsgOssCfgPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgOssCfgPb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cgt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cgt().data(), static_cast<int>(this->cgt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgOssCfgPb.cgt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cfgType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cfgtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cfgtype().data(), static_cast<int>(this->cfgtype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgOssCfgPb.cfgType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgOssCfgMongodb mongodb = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mongodb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgOssCfgMysql mysql = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mysql()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgOssCfgLog log = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgOssCfgXscHttpServer pubHttp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pubhttp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgOssCfgXscTcpServer priTcp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pritcp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .XmsgOssCfgXmsgNeH2nAddr h2n = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_h2n()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .XmsgOssCfgXmsgNeN2hAddr n2h = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_n2h()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgOssCfgMisc misc = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_misc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgOssCfgPb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgOssCfgPb)
  return false;
#undef DO_
}

void XmsgOssCfgPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgOssCfgPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgPb.cgt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cgt(), output);
  }

  // string cfgType = 2;
  if (this->cfgtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cfgtype().data(), static_cast<int>(this->cfgtype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgPb.cfgType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cfgtype(), output);
  }

  // .XmsgOssCfgMongodb mongodb = 3;
  if (this->has_mongodb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->mongodb_, output);
  }

  // .XmsgOssCfgMysql mysql = 4;
  if (this->has_mysql()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->mysql_, output);
  }

  // .XmsgOssCfgLog log = 5;
  if (this->has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->log_, output);
  }

  // .XmsgOssCfgXscHttpServer pubHttp = 6;
  if (this->has_pubhttp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->pubhttp_, output);
  }

  // .XmsgOssCfgXscTcpServer priTcp = 7;
  if (this->has_pritcp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->pritcp_, output);
  }

  // repeated .XmsgOssCfgXmsgNeH2nAddr h2n = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->h2n_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->h2n(static_cast<int>(i)), output);
  }

  // repeated .XmsgOssCfgXmsgNeN2hAddr n2h = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->n2h_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->n2h(static_cast<int>(i)), output);
  }

  // .XmsgOssCfgMisc misc = 10;
  if (this->has_misc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->misc_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgOssCfgPb)
}

::google::protobuf::uint8* XmsgOssCfgPb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgOssCfgPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgPb.cgt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cgt(), target);
  }

  // string cfgType = 2;
  if (this->cfgtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cfgtype().data(), static_cast<int>(this->cfgtype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgPb.cfgType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cfgtype(), target);
  }

  // .XmsgOssCfgMongodb mongodb = 3;
  if (this->has_mongodb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->mongodb_, deterministic, target);
  }

  // .XmsgOssCfgMysql mysql = 4;
  if (this->has_mysql()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->mysql_, deterministic, target);
  }

  // .XmsgOssCfgLog log = 5;
  if (this->has_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->log_, deterministic, target);
  }

  // .XmsgOssCfgXscHttpServer pubHttp = 6;
  if (this->has_pubhttp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->pubhttp_, deterministic, target);
  }

  // .XmsgOssCfgXscTcpServer priTcp = 7;
  if (this->has_pritcp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->pritcp_, deterministic, target);
  }

  // repeated .XmsgOssCfgXmsgNeH2nAddr h2n = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->h2n_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->h2n(static_cast<int>(i)), deterministic, target);
  }

  // repeated .XmsgOssCfgXmsgNeN2hAddr n2h = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->n2h_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->n2h(static_cast<int>(i)), deterministic, target);
  }

  // .XmsgOssCfgMisc misc = 10;
  if (this->has_misc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->misc_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgOssCfgPb)
  return target;
}

size_t XmsgOssCfgPb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgOssCfgPb)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .XmsgOssCfgXmsgNeH2nAddr h2n = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->h2n_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->h2n(static_cast<int>(i)));
    }
  }

  // repeated .XmsgOssCfgXmsgNeN2hAddr n2h = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->n2h_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->n2h(static_cast<int>(i)));
    }
  }

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cgt());
  }

  // string cfgType = 2;
  if (this->cfgtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cfgtype());
  }

  // .XmsgOssCfgMongodb mongodb = 3;
  if (this->has_mongodb()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mongodb_);
  }

  // .XmsgOssCfgMysql mysql = 4;
  if (this->has_mysql()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mysql_);
  }

  // .XmsgOssCfgLog log = 5;
  if (this->has_log()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->log_);
  }

  // .XmsgOssCfgXscHttpServer pubHttp = 6;
  if (this->has_pubhttp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pubhttp_);
  }

  // .XmsgOssCfgXscTcpServer priTcp = 7;
  if (this->has_pritcp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pritcp_);
  }

  // .XmsgOssCfgMisc misc = 10;
  if (this->has_misc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->misc_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgOssCfgPb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgOssCfgPb)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgOssCfgPb* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgOssCfgPb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgOssCfgPb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgOssCfgPb)
    MergeFrom(*source);
  }
}

void XmsgOssCfgPb::MergeFrom(const XmsgOssCfgPb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgOssCfgPb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  h2n_.MergeFrom(from.h2n_);
  n2h_.MergeFrom(from.n2h_);
  if (from.cgt().size() > 0) {

    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  if (from.cfgtype().size() > 0) {

    cfgtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cfgtype_);
  }
  if (from.has_mongodb()) {
    mutable_mongodb()->::XmsgOssCfgMongodb::MergeFrom(from.mongodb());
  }
  if (from.has_mysql()) {
    mutable_mysql()->::XmsgOssCfgMysql::MergeFrom(from.mysql());
  }
  if (from.has_log()) {
    mutable_log()->::XmsgOssCfgLog::MergeFrom(from.log());
  }
  if (from.has_pubhttp()) {
    mutable_pubhttp()->::XmsgOssCfgXscHttpServer::MergeFrom(from.pubhttp());
  }
  if (from.has_pritcp()) {
    mutable_pritcp()->::XmsgOssCfgXscTcpServer::MergeFrom(from.pritcp());
  }
  if (from.has_misc()) {
    mutable_misc()->::XmsgOssCfgMisc::MergeFrom(from.misc());
  }
}

void XmsgOssCfgPb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgOssCfgPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgOssCfgPb::CopyFrom(const XmsgOssCfgPb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgOssCfgPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgOssCfgPb::IsInitialized() const {
  return true;
}

void XmsgOssCfgPb::Swap(XmsgOssCfgPb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgOssCfgPb::InternalSwap(XmsgOssCfgPb* other) {
  using std::swap;
  h2n_.InternalSwap(&other->h2n_);
  n2h_.InternalSwap(&other->n2h_);
  cgt_.Swap(&other->cgt_);
  cfgtype_.Swap(&other->cfgtype_);
  swap(mongodb_, other->mongodb_);
  swap(mysql_, other->mysql_);
  swap(log_, other->log_);
  swap(pubhttp_, other->pubhttp_);
  swap(pritcp_, other->pritcp_);
  swap(misc_, other->misc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgOssCfgPb::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2doss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgOssCfgMongodb::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgOssCfgMongodb::kUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgOssCfgMongodb::XmsgOssCfgMongodb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgMongodb();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgOssCfgMongodb)
}
XmsgOssCfgMongodb::XmsgOssCfgMongodb(const XmsgOssCfgMongodb& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uri().size() > 0) {
    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgOssCfgMongodb)
}

void XmsgOssCfgMongodb::SharedCtor() {
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgOssCfgMongodb::~XmsgOssCfgMongodb() {
  // @@protoc_insertion_point(destructor:XmsgOssCfgMongodb)
  SharedDtor();
}

void XmsgOssCfgMongodb::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgOssCfgMongodb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgOssCfgMongodb::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgOssCfgMongodb& XmsgOssCfgMongodb::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgMongodb();
  return *internal_default_instance();
}

XmsgOssCfgMongodb* XmsgOssCfgMongodb::New(::google::protobuf::Arena* arena) const {
  XmsgOssCfgMongodb* n = new XmsgOssCfgMongodb;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgOssCfgMongodb::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgOssCfgMongodb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgOssCfgMongodb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgOssCfgMongodb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgOssCfgMongodb.uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgOssCfgMongodb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgOssCfgMongodb)
  return false;
#undef DO_
}

void XmsgOssCfgMongodb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgOssCfgMongodb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgMongodb.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgOssCfgMongodb)
}

::google::protobuf::uint8* XmsgOssCfgMongodb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgOssCfgMongodb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgMongodb.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgOssCfgMongodb)
  return target;
}

size_t XmsgOssCfgMongodb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgOssCfgMongodb)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string uri = 1;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgOssCfgMongodb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgOssCfgMongodb)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgOssCfgMongodb* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgOssCfgMongodb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgOssCfgMongodb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgOssCfgMongodb)
    MergeFrom(*source);
  }
}

void XmsgOssCfgMongodb::MergeFrom(const XmsgOssCfgMongodb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgOssCfgMongodb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uri().size() > 0) {

    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
}

void XmsgOssCfgMongodb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgOssCfgMongodb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgOssCfgMongodb::CopyFrom(const XmsgOssCfgMongodb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgOssCfgMongodb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgOssCfgMongodb::IsInitialized() const {
  return true;
}

void XmsgOssCfgMongodb::Swap(XmsgOssCfgMongodb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgOssCfgMongodb::InternalSwap(XmsgOssCfgMongodb* other) {
  using std::swap;
  uri_.Swap(&other->uri_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgOssCfgMongodb::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2doss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgOssCfgMysql::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgOssCfgMysql::kHostFieldNumber;
const int XmsgOssCfgMysql::kPortFieldNumber;
const int XmsgOssCfgMysql::kDbFieldNumber;
const int XmsgOssCfgMysql::kUsrFieldNumber;
const int XmsgOssCfgMysql::kPasswordFieldNumber;
const int XmsgOssCfgMysql::kPoolSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgOssCfgMysql::XmsgOssCfgMysql()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgMysql();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgOssCfgMysql)
}
XmsgOssCfgMysql::XmsgOssCfgMysql(const XmsgOssCfgMysql& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host().size() > 0) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db().size() > 0) {
    db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  usr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.usr().size() > 0) {
    usr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usr_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&poolsize_) -
    reinterpret_cast<char*>(&port_)) + sizeof(poolsize_));
  // @@protoc_insertion_point(copy_constructor:XmsgOssCfgMysql)
}

void XmsgOssCfgMysql::SharedCtor() {
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&poolsize_) -
      reinterpret_cast<char*>(&port_)) + sizeof(poolsize_));
  _cached_size_ = 0;
}

XmsgOssCfgMysql::~XmsgOssCfgMysql() {
  // @@protoc_insertion_point(destructor:XmsgOssCfgMysql)
  SharedDtor();
}

void XmsgOssCfgMysql::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgOssCfgMysql::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgOssCfgMysql::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgOssCfgMysql& XmsgOssCfgMysql::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgMysql();
  return *internal_default_instance();
}

XmsgOssCfgMysql* XmsgOssCfgMysql::New(::google::protobuf::Arena* arena) const {
  XmsgOssCfgMysql* n = new XmsgOssCfgMysql;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgOssCfgMysql::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgOssCfgMysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&poolsize_) -
      reinterpret_cast<char*>(&port_)) + sizeof(poolsize_));
  _internal_metadata_.Clear();
}

bool XmsgOssCfgMysql::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgOssCfgMysql)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgOssCfgMysql.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db().data(), static_cast<int>(this->db().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgOssCfgMysql.db"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string usr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->usr().data(), static_cast<int>(this->usr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgOssCfgMysql.usr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgOssCfgMysql.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 poolSize = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poolsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgOssCfgMysql)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgOssCfgMysql)
  return false;
#undef DO_
}

void XmsgOssCfgMysql::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgOssCfgMysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgMysql.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // string db = 3;
  if (this->db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db().data(), static_cast<int>(this->db().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgMysql.db");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->db(), output);
  }

  // string usr = 4;
  if (this->usr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usr().data(), static_cast<int>(this->usr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgMysql.usr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->usr(), output);
  }

  // string password = 5;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgMysql.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->password(), output);
  }

  // uint32 poolSize = 6;
  if (this->poolsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->poolsize(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgOssCfgMysql)
}

::google::protobuf::uint8* XmsgOssCfgMysql::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgOssCfgMysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgMysql.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // string db = 3;
  if (this->db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db().data(), static_cast<int>(this->db().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgMysql.db");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->db(), target);
  }

  // string usr = 4;
  if (this->usr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usr().data(), static_cast<int>(this->usr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgMysql.usr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->usr(), target);
  }

  // string password = 5;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgMysql.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->password(), target);
  }

  // uint32 poolSize = 6;
  if (this->poolsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->poolsize(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgOssCfgMysql)
  return target;
}

size_t XmsgOssCfgMysql::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgOssCfgMysql)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // string db = 3;
  if (this->db().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db());
  }

  // string usr = 4;
  if (this->usr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->usr());
  }

  // string password = 5;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // uint32 poolSize = 6;
  if (this->poolsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->poolsize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgOssCfgMysql::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgOssCfgMysql)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgOssCfgMysql* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgOssCfgMysql>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgOssCfgMysql)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgOssCfgMysql)
    MergeFrom(*source);
  }
}

void XmsgOssCfgMysql::MergeFrom(const XmsgOssCfgMysql& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgOssCfgMysql)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.db().size() > 0) {

    db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  if (from.usr().size() > 0) {

    usr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usr_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.poolsize() != 0) {
    set_poolsize(from.poolsize());
  }
}

void XmsgOssCfgMysql::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgOssCfgMysql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgOssCfgMysql::CopyFrom(const XmsgOssCfgMysql& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgOssCfgMysql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgOssCfgMysql::IsInitialized() const {
  return true;
}

void XmsgOssCfgMysql::Swap(XmsgOssCfgMysql* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgOssCfgMysql::InternalSwap(XmsgOssCfgMysql* other) {
  using std::swap;
  host_.Swap(&other->host_);
  db_.Swap(&other->db_);
  usr_.Swap(&other->usr_);
  password_.Swap(&other->password_);
  swap(port_, other->port_);
  swap(poolsize_, other->poolsize_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgOssCfgMysql::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2doss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgOssCfgLog::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgOssCfgLog::kLevelFieldNumber;
const int XmsgOssCfgLog::kOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgOssCfgLog::XmsgOssCfgLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgLog();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgOssCfgLog)
}
XmsgOssCfgLog::XmsgOssCfgLog(const XmsgOssCfgLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.level().size() > 0) {
    level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_);
  }
  output_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.output().size() > 0) {
    output_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgOssCfgLog)
}

void XmsgOssCfgLog::SharedCtor() {
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgOssCfgLog::~XmsgOssCfgLog() {
  // @@protoc_insertion_point(destructor:XmsgOssCfgLog)
  SharedDtor();
}

void XmsgOssCfgLog::SharedDtor() {
  level_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgOssCfgLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgOssCfgLog::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgOssCfgLog& XmsgOssCfgLog::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgLog();
  return *internal_default_instance();
}

XmsgOssCfgLog* XmsgOssCfgLog::New(::google::protobuf::Arena* arena) const {
  XmsgOssCfgLog* n = new XmsgOssCfgLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgOssCfgLog::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgOssCfgLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgOssCfgLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgOssCfgLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_level()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->level().data(), static_cast<int>(this->level().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgOssCfgLog.level"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string output = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output().data(), static_cast<int>(this->output().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgOssCfgLog.output"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgOssCfgLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgOssCfgLog)
  return false;
#undef DO_
}

void XmsgOssCfgLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgOssCfgLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string level = 1;
  if (this->level().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->level().data(), static_cast<int>(this->level().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgLog.level");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->level(), output);
  }

  // string output = 2;
  if (this->output().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output().data(), static_cast<int>(this->output().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgLog.output");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->output(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgOssCfgLog)
}

::google::protobuf::uint8* XmsgOssCfgLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgOssCfgLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string level = 1;
  if (this->level().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->level().data(), static_cast<int>(this->level().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgLog.level");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->level(), target);
  }

  // string output = 2;
  if (this->output().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output().data(), static_cast<int>(this->output().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgLog.output");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->output(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgOssCfgLog)
  return target;
}

size_t XmsgOssCfgLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgOssCfgLog)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string level = 1;
  if (this->level().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->level());
  }

  // string output = 2;
  if (this->output().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgOssCfgLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgOssCfgLog)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgOssCfgLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgOssCfgLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgOssCfgLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgOssCfgLog)
    MergeFrom(*source);
  }
}

void XmsgOssCfgLog::MergeFrom(const XmsgOssCfgLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgOssCfgLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level().size() > 0) {

    level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_);
  }
  if (from.output().size() > 0) {

    output_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_);
  }
}

void XmsgOssCfgLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgOssCfgLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgOssCfgLog::CopyFrom(const XmsgOssCfgLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgOssCfgLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgOssCfgLog::IsInitialized() const {
  return true;
}

void XmsgOssCfgLog::Swap(XmsgOssCfgLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgOssCfgLog::InternalSwap(XmsgOssCfgLog* other) {
  using std::swap;
  level_.Swap(&other->level_);
  output_.Swap(&other->output_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgOssCfgLog::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2doss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgOssCfgXscTcpServer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgOssCfgXscTcpServer::kAddrFieldNumber;
const int XmsgOssCfgXscTcpServer::kWorkerFieldNumber;
const int XmsgOssCfgXscTcpServer::kPeerLimitFieldNumber;
const int XmsgOssCfgXscTcpServer::kPeerMtuFieldNumber;
const int XmsgOssCfgXscTcpServer::kPeerRcvBufFieldNumber;
const int XmsgOssCfgXscTcpServer::kPeerSndBufFieldNumber;
const int XmsgOssCfgXscTcpServer::kLazyCloseFieldNumber;
const int XmsgOssCfgXscTcpServer::kTracingFieldNumber;
const int XmsgOssCfgXscTcpServer::kHeartbeatFieldNumber;
const int XmsgOssCfgXscTcpServer::kN2HZombieFieldNumber;
const int XmsgOssCfgXscTcpServer::kN2HTransTimeoutFieldNumber;
const int XmsgOssCfgXscTcpServer::kN2HTracingFieldNumber;
const int XmsgOssCfgXscTcpServer::kH2NReConnFieldNumber;
const int XmsgOssCfgXscTcpServer::kH2NTransTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgOssCfgXscTcpServer::XmsgOssCfgXscTcpServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgXscTcpServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgOssCfgXscTcpServer)
}
XmsgOssCfgXscTcpServer::XmsgOssCfgXscTcpServer(const XmsgOssCfgXscTcpServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  ::memcpy(&worker_, &from.worker_,
    static_cast<size_t>(reinterpret_cast<char*>(&h2ntranstimeout_) -
    reinterpret_cast<char*>(&worker_)) + sizeof(h2ntranstimeout_));
  // @@protoc_insertion_point(copy_constructor:XmsgOssCfgXscTcpServer)
}

void XmsgOssCfgXscTcpServer::SharedCtor() {
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&worker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h2ntranstimeout_) -
      reinterpret_cast<char*>(&worker_)) + sizeof(h2ntranstimeout_));
  _cached_size_ = 0;
}

XmsgOssCfgXscTcpServer::~XmsgOssCfgXscTcpServer() {
  // @@protoc_insertion_point(destructor:XmsgOssCfgXscTcpServer)
  SharedDtor();
}

void XmsgOssCfgXscTcpServer::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgOssCfgXscTcpServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgOssCfgXscTcpServer::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgOssCfgXscTcpServer& XmsgOssCfgXscTcpServer::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgXscTcpServer();
  return *internal_default_instance();
}

XmsgOssCfgXscTcpServer* XmsgOssCfgXscTcpServer::New(::google::protobuf::Arena* arena) const {
  XmsgOssCfgXscTcpServer* n = new XmsgOssCfgXscTcpServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgOssCfgXscTcpServer::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgOssCfgXscTcpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&worker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h2ntranstimeout_) -
      reinterpret_cast<char*>(&worker_)) + sizeof(h2ntranstimeout_));
  _internal_metadata_.Clear();
}

bool XmsgOssCfgXscTcpServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgOssCfgXscTcpServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgOssCfgXscTcpServer.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 worker = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerLimit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peerlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerMtu = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peermtu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerRcvBuf = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peerrcvbuf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerSndBuf = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peersndbuf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lazyClose = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lazyclose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool tracing = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tracing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 heartbeat = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heartbeat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 n2hZombie = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n2hzombie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 n2hTransTimeout = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n2htranstimeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool n2hTracing = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &n2htracing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 h2nReConn = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h2nreconn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 h2nTransTimeout = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h2ntranstimeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgOssCfgXscTcpServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgOssCfgXscTcpServer)
  return false;
#undef DO_
}

void XmsgOssCfgXscTcpServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgOssCfgXscTcpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgXscTcpServer.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addr(), output);
  }

  // uint32 worker = 2;
  if (this->worker() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->worker(), output);
  }

  // uint32 peerLimit = 3;
  if (this->peerlimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->peerlimit(), output);
  }

  // uint32 peerMtu = 4;
  if (this->peermtu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->peermtu(), output);
  }

  // uint32 peerRcvBuf = 5;
  if (this->peerrcvbuf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->peerrcvbuf(), output);
  }

  // uint32 peerSndBuf = 6;
  if (this->peersndbuf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->peersndbuf(), output);
  }

  // uint32 lazyClose = 7;
  if (this->lazyclose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lazyclose(), output);
  }

  // bool tracing = 8;
  if (this->tracing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->tracing(), output);
  }

  // uint32 heartbeat = 9;
  if (this->heartbeat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->heartbeat(), output);
  }

  // uint32 n2hZombie = 10;
  if (this->n2hzombie() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->n2hzombie(), output);
  }

  // uint32 n2hTransTimeout = 11;
  if (this->n2htranstimeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->n2htranstimeout(), output);
  }

  // bool n2hTracing = 12;
  if (this->n2htracing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->n2htracing(), output);
  }

  // uint32 h2nReConn = 13;
  if (this->h2nreconn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->h2nreconn(), output);
  }

  // uint32 h2nTransTimeout = 14;
  if (this->h2ntranstimeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->h2ntranstimeout(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgOssCfgXscTcpServer)
}

::google::protobuf::uint8* XmsgOssCfgXscTcpServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgOssCfgXscTcpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgXscTcpServer.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  // uint32 worker = 2;
  if (this->worker() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->worker(), target);
  }

  // uint32 peerLimit = 3;
  if (this->peerlimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->peerlimit(), target);
  }

  // uint32 peerMtu = 4;
  if (this->peermtu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->peermtu(), target);
  }

  // uint32 peerRcvBuf = 5;
  if (this->peerrcvbuf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->peerrcvbuf(), target);
  }

  // uint32 peerSndBuf = 6;
  if (this->peersndbuf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->peersndbuf(), target);
  }

  // uint32 lazyClose = 7;
  if (this->lazyclose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lazyclose(), target);
  }

  // bool tracing = 8;
  if (this->tracing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->tracing(), target);
  }

  // uint32 heartbeat = 9;
  if (this->heartbeat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->heartbeat(), target);
  }

  // uint32 n2hZombie = 10;
  if (this->n2hzombie() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->n2hzombie(), target);
  }

  // uint32 n2hTransTimeout = 11;
  if (this->n2htranstimeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->n2htranstimeout(), target);
  }

  // bool n2hTracing = 12;
  if (this->n2htracing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->n2htracing(), target);
  }

  // uint32 h2nReConn = 13;
  if (this->h2nreconn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->h2nreconn(), target);
  }

  // uint32 h2nTransTimeout = 14;
  if (this->h2ntranstimeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->h2ntranstimeout(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgOssCfgXscTcpServer)
  return target;
}

size_t XmsgOssCfgXscTcpServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgOssCfgXscTcpServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string addr = 1;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  // uint32 worker = 2;
  if (this->worker() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worker());
  }

  // uint32 peerLimit = 3;
  if (this->peerlimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peerlimit());
  }

  // uint32 peerMtu = 4;
  if (this->peermtu() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peermtu());
  }

  // uint32 peerRcvBuf = 5;
  if (this->peerrcvbuf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peerrcvbuf());
  }

  // uint32 peerSndBuf = 6;
  if (this->peersndbuf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peersndbuf());
  }

  // uint32 lazyClose = 7;
  if (this->lazyclose() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lazyclose());
  }

  // uint32 heartbeat = 9;
  if (this->heartbeat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heartbeat());
  }

  // uint32 n2hZombie = 10;
  if (this->n2hzombie() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->n2hzombie());
  }

  // bool tracing = 8;
  if (this->tracing() != 0) {
    total_size += 1 + 1;
  }

  // bool n2hTracing = 12;
  if (this->n2htracing() != 0) {
    total_size += 1 + 1;
  }

  // uint32 n2hTransTimeout = 11;
  if (this->n2htranstimeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->n2htranstimeout());
  }

  // uint32 h2nReConn = 13;
  if (this->h2nreconn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->h2nreconn());
  }

  // uint32 h2nTransTimeout = 14;
  if (this->h2ntranstimeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->h2ntranstimeout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgOssCfgXscTcpServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgOssCfgXscTcpServer)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgOssCfgXscTcpServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgOssCfgXscTcpServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgOssCfgXscTcpServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgOssCfgXscTcpServer)
    MergeFrom(*source);
  }
}

void XmsgOssCfgXscTcpServer::MergeFrom(const XmsgOssCfgXscTcpServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgOssCfgXscTcpServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  if (from.worker() != 0) {
    set_worker(from.worker());
  }
  if (from.peerlimit() != 0) {
    set_peerlimit(from.peerlimit());
  }
  if (from.peermtu() != 0) {
    set_peermtu(from.peermtu());
  }
  if (from.peerrcvbuf() != 0) {
    set_peerrcvbuf(from.peerrcvbuf());
  }
  if (from.peersndbuf() != 0) {
    set_peersndbuf(from.peersndbuf());
  }
  if (from.lazyclose() != 0) {
    set_lazyclose(from.lazyclose());
  }
  if (from.heartbeat() != 0) {
    set_heartbeat(from.heartbeat());
  }
  if (from.n2hzombie() != 0) {
    set_n2hzombie(from.n2hzombie());
  }
  if (from.tracing() != 0) {
    set_tracing(from.tracing());
  }
  if (from.n2htracing() != 0) {
    set_n2htracing(from.n2htracing());
  }
  if (from.n2htranstimeout() != 0) {
    set_n2htranstimeout(from.n2htranstimeout());
  }
  if (from.h2nreconn() != 0) {
    set_h2nreconn(from.h2nreconn());
  }
  if (from.h2ntranstimeout() != 0) {
    set_h2ntranstimeout(from.h2ntranstimeout());
  }
}

void XmsgOssCfgXscTcpServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgOssCfgXscTcpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgOssCfgXscTcpServer::CopyFrom(const XmsgOssCfgXscTcpServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgOssCfgXscTcpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgOssCfgXscTcpServer::IsInitialized() const {
  return true;
}

void XmsgOssCfgXscTcpServer::Swap(XmsgOssCfgXscTcpServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgOssCfgXscTcpServer::InternalSwap(XmsgOssCfgXscTcpServer* other) {
  using std::swap;
  addr_.Swap(&other->addr_);
  swap(worker_, other->worker_);
  swap(peerlimit_, other->peerlimit_);
  swap(peermtu_, other->peermtu_);
  swap(peerrcvbuf_, other->peerrcvbuf_);
  swap(peersndbuf_, other->peersndbuf_);
  swap(lazyclose_, other->lazyclose_);
  swap(heartbeat_, other->heartbeat_);
  swap(n2hzombie_, other->n2hzombie_);
  swap(tracing_, other->tracing_);
  swap(n2htracing_, other->n2htracing_);
  swap(n2htranstimeout_, other->n2htranstimeout_);
  swap(h2nreconn_, other->h2nreconn_);
  swap(h2ntranstimeout_, other->h2ntranstimeout_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgOssCfgXscTcpServer::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2doss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgOssCfgXscHttpServer::InitAsDefaultInstance() {
  ::_XmsgOssCfgXscHttpServer_default_instance_._instance.get_mutable()->tcp_ = const_cast< ::XmsgOssCfgXscTcpServer*>(
      ::XmsgOssCfgXscTcpServer::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgOssCfgXscHttpServer::kTcpFieldNumber;
const int XmsgOssCfgXscHttpServer::kHeaderLimitFieldNumber;
const int XmsgOssCfgXscHttpServer::kBodyLimitFieldNumber;
const int XmsgOssCfgXscHttpServer::kCloseWaitFieldNumber;
const int XmsgOssCfgXscHttpServer::kRequiredHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgOssCfgXscHttpServer::XmsgOssCfgXscHttpServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgXscHttpServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgOssCfgXscHttpServer)
}
XmsgOssCfgXscHttpServer::XmsgOssCfgXscHttpServer(const XmsgOssCfgXscHttpServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      requiredheader_(from.requiredheader_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tcp()) {
    tcp_ = new ::XmsgOssCfgXscTcpServer(*from.tcp_);
  } else {
    tcp_ = NULL;
  }
  ::memcpy(&headerlimit_, &from.headerlimit_,
    static_cast<size_t>(reinterpret_cast<char*>(&closewait_) -
    reinterpret_cast<char*>(&headerlimit_)) + sizeof(closewait_));
  // @@protoc_insertion_point(copy_constructor:XmsgOssCfgXscHttpServer)
}

void XmsgOssCfgXscHttpServer::SharedCtor() {
  ::memset(&tcp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&closewait_) -
      reinterpret_cast<char*>(&tcp_)) + sizeof(closewait_));
  _cached_size_ = 0;
}

XmsgOssCfgXscHttpServer::~XmsgOssCfgXscHttpServer() {
  // @@protoc_insertion_point(destructor:XmsgOssCfgXscHttpServer)
  SharedDtor();
}

void XmsgOssCfgXscHttpServer::SharedDtor() {
  if (this != internal_default_instance()) delete tcp_;
}

void XmsgOssCfgXscHttpServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgOssCfgXscHttpServer::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgOssCfgXscHttpServer& XmsgOssCfgXscHttpServer::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgXscHttpServer();
  return *internal_default_instance();
}

XmsgOssCfgXscHttpServer* XmsgOssCfgXscHttpServer::New(::google::protobuf::Arena* arena) const {
  XmsgOssCfgXscHttpServer* n = new XmsgOssCfgXscHttpServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgOssCfgXscHttpServer::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgOssCfgXscHttpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requiredheader_.Clear();
  if (GetArenaNoVirtual() == NULL && tcp_ != NULL) {
    delete tcp_;
  }
  tcp_ = NULL;
  ::memset(&headerlimit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&closewait_) -
      reinterpret_cast<char*>(&headerlimit_)) + sizeof(closewait_));
  _internal_metadata_.Clear();
}

bool XmsgOssCfgXscHttpServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgOssCfgXscHttpServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .XmsgOssCfgXscTcpServer tcp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tcp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 headerLimit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headerlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 bodyLimit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bodylimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 closeWait = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &closewait_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string requiredHeader = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_requiredheader()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->requiredheader(this->requiredheader_size() - 1).data(),
            static_cast<int>(this->requiredheader(this->requiredheader_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgOssCfgXscHttpServer.requiredHeader"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgOssCfgXscHttpServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgOssCfgXscHttpServer)
  return false;
#undef DO_
}

void XmsgOssCfgXscHttpServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgOssCfgXscHttpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .XmsgOssCfgXscTcpServer tcp = 1;
  if (this->has_tcp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tcp_, output);
  }

  // uint32 headerLimit = 2;
  if (this->headerlimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->headerlimit(), output);
  }

  // uint32 bodyLimit = 3;
  if (this->bodylimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bodylimit(), output);
  }

  // uint32 closeWait = 4;
  if (this->closewait() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->closewait(), output);
  }

  // repeated string requiredHeader = 5;
  for (int i = 0, n = this->requiredheader_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->requiredheader(i).data(), static_cast<int>(this->requiredheader(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgXscHttpServer.requiredHeader");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->requiredheader(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgOssCfgXscHttpServer)
}

::google::protobuf::uint8* XmsgOssCfgXscHttpServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgOssCfgXscHttpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .XmsgOssCfgXscTcpServer tcp = 1;
  if (this->has_tcp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->tcp_, deterministic, target);
  }

  // uint32 headerLimit = 2;
  if (this->headerlimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->headerlimit(), target);
  }

  // uint32 bodyLimit = 3;
  if (this->bodylimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bodylimit(), target);
  }

  // uint32 closeWait = 4;
  if (this->closewait() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->closewait(), target);
  }

  // repeated string requiredHeader = 5;
  for (int i = 0, n = this->requiredheader_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->requiredheader(i).data(), static_cast<int>(this->requiredheader(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgXscHttpServer.requiredHeader");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->requiredheader(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgOssCfgXscHttpServer)
  return target;
}

size_t XmsgOssCfgXscHttpServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgOssCfgXscHttpServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string requiredHeader = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->requiredheader_size());
  for (int i = 0, n = this->requiredheader_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->requiredheader(i));
  }

  // .XmsgOssCfgXscTcpServer tcp = 1;
  if (this->has_tcp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tcp_);
  }

  // uint32 headerLimit = 2;
  if (this->headerlimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->headerlimit());
  }

  // uint32 bodyLimit = 3;
  if (this->bodylimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bodylimit());
  }

  // uint32 closeWait = 4;
  if (this->closewait() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->closewait());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgOssCfgXscHttpServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgOssCfgXscHttpServer)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgOssCfgXscHttpServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgOssCfgXscHttpServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgOssCfgXscHttpServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgOssCfgXscHttpServer)
    MergeFrom(*source);
  }
}

void XmsgOssCfgXscHttpServer::MergeFrom(const XmsgOssCfgXscHttpServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgOssCfgXscHttpServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requiredheader_.MergeFrom(from.requiredheader_);
  if (from.has_tcp()) {
    mutable_tcp()->::XmsgOssCfgXscTcpServer::MergeFrom(from.tcp());
  }
  if (from.headerlimit() != 0) {
    set_headerlimit(from.headerlimit());
  }
  if (from.bodylimit() != 0) {
    set_bodylimit(from.bodylimit());
  }
  if (from.closewait() != 0) {
    set_closewait(from.closewait());
  }
}

void XmsgOssCfgXscHttpServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgOssCfgXscHttpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgOssCfgXscHttpServer::CopyFrom(const XmsgOssCfgXscHttpServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgOssCfgXscHttpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgOssCfgXscHttpServer::IsInitialized() const {
  return true;
}

void XmsgOssCfgXscHttpServer::Swap(XmsgOssCfgXscHttpServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgOssCfgXscHttpServer::InternalSwap(XmsgOssCfgXscHttpServer* other) {
  using std::swap;
  requiredheader_.InternalSwap(&other->requiredheader_);
  swap(tcp_, other->tcp_);
  swap(headerlimit_, other->headerlimit_);
  swap(bodylimit_, other->bodylimit_);
  swap(closewait_, other->closewait_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgOssCfgXscHttpServer::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2doss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgOssCfgXmsgNeH2nAddr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgOssCfgXmsgNeH2nAddr::kNegFieldNumber;
const int XmsgOssCfgXmsgNeH2nAddr::kAddrFieldNumber;
const int XmsgOssCfgXmsgNeH2nAddr::kPwdFieldNumber;
const int XmsgOssCfgXmsgNeH2nAddr::kAlgFieldNumber;
const int XmsgOssCfgXmsgNeH2nAddr::kRedundantFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgOssCfgXmsgNeH2nAddr::XmsgOssCfgXmsgNeH2nAddr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgXmsgNeH2nAddr();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgOssCfgXmsgNeH2nAddr)
}
XmsgOssCfgXmsgNeH2nAddr::XmsgOssCfgXmsgNeH2nAddr(const XmsgOssCfgXmsgNeH2nAddr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.neg().size() > 0) {
    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pwd().size() > 0) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  alg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.alg().size() > 0) {
    alg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alg_);
  }
  redundant_ = from.redundant_;
  // @@protoc_insertion_point(copy_constructor:XmsgOssCfgXmsgNeH2nAddr)
}

void XmsgOssCfgXmsgNeH2nAddr::SharedCtor() {
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redundant_ = 0u;
  _cached_size_ = 0;
}

XmsgOssCfgXmsgNeH2nAddr::~XmsgOssCfgXmsgNeH2nAddr() {
  // @@protoc_insertion_point(destructor:XmsgOssCfgXmsgNeH2nAddr)
  SharedDtor();
}

void XmsgOssCfgXmsgNeH2nAddr::SharedDtor() {
  neg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgOssCfgXmsgNeH2nAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgOssCfgXmsgNeH2nAddr::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgOssCfgXmsgNeH2nAddr& XmsgOssCfgXmsgNeH2nAddr::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgXmsgNeH2nAddr();
  return *internal_default_instance();
}

XmsgOssCfgXmsgNeH2nAddr* XmsgOssCfgXmsgNeH2nAddr::New(::google::protobuf::Arena* arena) const {
  XmsgOssCfgXmsgNeH2nAddr* n = new XmsgOssCfgXmsgNeH2nAddr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgOssCfgXmsgNeH2nAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgOssCfgXmsgNeH2nAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redundant_ = 0u;
  _internal_metadata_.Clear();
}

bool XmsgOssCfgXmsgNeH2nAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgOssCfgXmsgNeH2nAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string neg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->neg().data(), static_cast<int>(this->neg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgOssCfgXmsgNeH2nAddr.neg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string addr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgOssCfgXmsgNeH2nAddr.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pwd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pwd().data(), static_cast<int>(this->pwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgOssCfgXmsgNeH2nAddr.pwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string alg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alg().data(), static_cast<int>(this->alg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgOssCfgXmsgNeH2nAddr.alg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 redundant = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redundant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgOssCfgXmsgNeH2nAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgOssCfgXmsgNeH2nAddr)
  return false;
#undef DO_
}

void XmsgOssCfgXmsgNeH2nAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgOssCfgXmsgNeH2nAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgXmsgNeH2nAddr.neg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->neg(), output);
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgXmsgNeH2nAddr.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->addr(), output);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgXmsgNeH2nAddr.pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd(), output);
  }

  // string alg = 4;
  if (this->alg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alg().data(), static_cast<int>(this->alg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgXmsgNeH2nAddr.alg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->alg(), output);
  }

  // uint32 redundant = 5;
  if (this->redundant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->redundant(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgOssCfgXmsgNeH2nAddr)
}

::google::protobuf::uint8* XmsgOssCfgXmsgNeH2nAddr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgOssCfgXmsgNeH2nAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgXmsgNeH2nAddr.neg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->neg(), target);
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgXmsgNeH2nAddr.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->addr(), target);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgXmsgNeH2nAddr.pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }

  // string alg = 4;
  if (this->alg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alg().data(), static_cast<int>(this->alg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgXmsgNeH2nAddr.alg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->alg(), target);
  }

  // uint32 redundant = 5;
  if (this->redundant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->redundant(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgOssCfgXmsgNeH2nAddr)
  return target;
}

size_t XmsgOssCfgXmsgNeH2nAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgOssCfgXmsgNeH2nAddr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string neg = 1;
  if (this->neg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->neg());
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pwd());
  }

  // string alg = 4;
  if (this->alg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alg());
  }

  // uint32 redundant = 5;
  if (this->redundant() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->redundant());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgOssCfgXmsgNeH2nAddr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgOssCfgXmsgNeH2nAddr)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgOssCfgXmsgNeH2nAddr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgOssCfgXmsgNeH2nAddr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgOssCfgXmsgNeH2nAddr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgOssCfgXmsgNeH2nAddr)
    MergeFrom(*source);
  }
}

void XmsgOssCfgXmsgNeH2nAddr::MergeFrom(const XmsgOssCfgXmsgNeH2nAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgOssCfgXmsgNeH2nAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.neg().size() > 0) {

    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  if (from.pwd().size() > 0) {

    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  if (from.alg().size() > 0) {

    alg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alg_);
  }
  if (from.redundant() != 0) {
    set_redundant(from.redundant());
  }
}

void XmsgOssCfgXmsgNeH2nAddr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgOssCfgXmsgNeH2nAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgOssCfgXmsgNeH2nAddr::CopyFrom(const XmsgOssCfgXmsgNeH2nAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgOssCfgXmsgNeH2nAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgOssCfgXmsgNeH2nAddr::IsInitialized() const {
  return true;
}

void XmsgOssCfgXmsgNeH2nAddr::Swap(XmsgOssCfgXmsgNeH2nAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgOssCfgXmsgNeH2nAddr::InternalSwap(XmsgOssCfgXmsgNeH2nAddr* other) {
  using std::swap;
  neg_.Swap(&other->neg_);
  addr_.Swap(&other->addr_);
  pwd_.Swap(&other->pwd_);
  alg_.Swap(&other->alg_);
  swap(redundant_, other->redundant_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgOssCfgXmsgNeH2nAddr::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2doss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgOssCfgXmsgNeN2hAddr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgOssCfgXmsgNeN2hAddr::kNegFieldNumber;
const int XmsgOssCfgXmsgNeN2hAddr::kCgtFieldNumber;
const int XmsgOssCfgXmsgNeN2hAddr::kPwdFieldNumber;
const int XmsgOssCfgXmsgNeN2hAddr::kAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgOssCfgXmsgNeN2hAddr::XmsgOssCfgXmsgNeN2hAddr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgXmsgNeN2hAddr();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgOssCfgXmsgNeN2hAddr)
}
XmsgOssCfgXmsgNeN2hAddr::XmsgOssCfgXmsgNeN2hAddr(const XmsgOssCfgXmsgNeN2hAddr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.neg().size() > 0) {
    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cgt().size() > 0) {
    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pwd().size() > 0) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgOssCfgXmsgNeN2hAddr)
}

void XmsgOssCfgXmsgNeN2hAddr::SharedCtor() {
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgOssCfgXmsgNeN2hAddr::~XmsgOssCfgXmsgNeN2hAddr() {
  // @@protoc_insertion_point(destructor:XmsgOssCfgXmsgNeN2hAddr)
  SharedDtor();
}

void XmsgOssCfgXmsgNeN2hAddr::SharedDtor() {
  neg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgOssCfgXmsgNeN2hAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgOssCfgXmsgNeN2hAddr::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgOssCfgXmsgNeN2hAddr& XmsgOssCfgXmsgNeN2hAddr::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgXmsgNeN2hAddr();
  return *internal_default_instance();
}

XmsgOssCfgXmsgNeN2hAddr* XmsgOssCfgXmsgNeN2hAddr::New(::google::protobuf::Arena* arena) const {
  XmsgOssCfgXmsgNeN2hAddr* n = new XmsgOssCfgXmsgNeN2hAddr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgOssCfgXmsgNeN2hAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgOssCfgXmsgNeN2hAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgOssCfgXmsgNeN2hAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgOssCfgXmsgNeN2hAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string neg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->neg().data(), static_cast<int>(this->neg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgOssCfgXmsgNeN2hAddr.neg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cgt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cgt().data(), static_cast<int>(this->cgt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgOssCfgXmsgNeN2hAddr.cgt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pwd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pwd().data(), static_cast<int>(this->pwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgOssCfgXmsgNeN2hAddr.pwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string addr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgOssCfgXmsgNeN2hAddr.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgOssCfgXmsgNeN2hAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgOssCfgXmsgNeN2hAddr)
  return false;
#undef DO_
}

void XmsgOssCfgXmsgNeN2hAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgOssCfgXmsgNeN2hAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgXmsgNeN2hAddr.neg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->neg(), output);
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgXmsgNeN2hAddr.cgt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cgt(), output);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgXmsgNeN2hAddr.pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd(), output);
  }

  // string addr = 4;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgXmsgNeN2hAddr.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->addr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgOssCfgXmsgNeN2hAddr)
}

::google::protobuf::uint8* XmsgOssCfgXmsgNeN2hAddr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgOssCfgXmsgNeN2hAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgXmsgNeN2hAddr.neg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->neg(), target);
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgXmsgNeN2hAddr.cgt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cgt(), target);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgXmsgNeN2hAddr.pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }

  // string addr = 4;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgXmsgNeN2hAddr.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->addr(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgOssCfgXmsgNeN2hAddr)
  return target;
}

size_t XmsgOssCfgXmsgNeN2hAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgOssCfgXmsgNeN2hAddr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string neg = 1;
  if (this->neg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->neg());
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cgt());
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pwd());
  }

  // string addr = 4;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgOssCfgXmsgNeN2hAddr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgOssCfgXmsgNeN2hAddr)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgOssCfgXmsgNeN2hAddr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgOssCfgXmsgNeN2hAddr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgOssCfgXmsgNeN2hAddr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgOssCfgXmsgNeN2hAddr)
    MergeFrom(*source);
  }
}

void XmsgOssCfgXmsgNeN2hAddr::MergeFrom(const XmsgOssCfgXmsgNeN2hAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgOssCfgXmsgNeN2hAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.neg().size() > 0) {

    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  if (from.cgt().size() > 0) {

    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  if (from.pwd().size() > 0) {

    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
}

void XmsgOssCfgXmsgNeN2hAddr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgOssCfgXmsgNeN2hAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgOssCfgXmsgNeN2hAddr::CopyFrom(const XmsgOssCfgXmsgNeN2hAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgOssCfgXmsgNeN2hAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgOssCfgXmsgNeN2hAddr::IsInitialized() const {
  return true;
}

void XmsgOssCfgXmsgNeN2hAddr::Swap(XmsgOssCfgXmsgNeN2hAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgOssCfgXmsgNeN2hAddr::InternalSwap(XmsgOssCfgXmsgNeN2hAddr* other) {
  using std::swap;
  neg_.Swap(&other->neg_);
  cgt_.Swap(&other->cgt_);
  pwd_.Swap(&other->pwd_);
  addr_.Swap(&other->addr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgOssCfgXmsgNeN2hAddr::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2doss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgOssCfgMisc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgOssCfgMisc::kStorageFieldNumber;
const int XmsgOssCfgMisc::kIpfsNodeFieldNumber;
const int XmsgOssCfgMisc::kIpfsUploadThreadFieldNumber;
const int XmsgOssCfgMisc::kIpfsDownloadThreadFieldNumber;
const int XmsgOssCfgMisc::kObjPathFieldNumber;
const int XmsgOssCfgMisc::kObjHashSegmentFieldNumber;
const int XmsgOssCfgMisc::kObjDownloadThreadFieldNumber;
const int XmsgOssCfgMisc::kObjDownloadWriteBufSizeFieldNumber;
const int XmsgOssCfgMisc::kObjInfoCachedFieldNumber;
const int XmsgOssCfgMisc::kObjInfoLruFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgOssCfgMisc::XmsgOssCfgMisc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgMisc();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgOssCfgMisc)
}
XmsgOssCfgMisc::XmsgOssCfgMisc(const XmsgOssCfgMisc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  objpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.objpath().size() > 0) {
    objpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.objpath_);
  }
  ipfsnode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ipfsnode().size() > 0) {
    ipfsnode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipfsnode_);
  }
  ::memcpy(&objhashsegment_, &from.objhashsegment_,
    static_cast<size_t>(reinterpret_cast<char*>(&ipfsdownloadthread_) -
    reinterpret_cast<char*>(&objhashsegment_)) + sizeof(ipfsdownloadthread_));
  // @@protoc_insertion_point(copy_constructor:XmsgOssCfgMisc)
}

void XmsgOssCfgMisc::SharedCtor() {
  objpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipfsnode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&objhashsegment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipfsdownloadthread_) -
      reinterpret_cast<char*>(&objhashsegment_)) + sizeof(ipfsdownloadthread_));
  _cached_size_ = 0;
}

XmsgOssCfgMisc::~XmsgOssCfgMisc() {
  // @@protoc_insertion_point(destructor:XmsgOssCfgMisc)
  SharedDtor();
}

void XmsgOssCfgMisc::SharedDtor() {
  objpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipfsnode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgOssCfgMisc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgOssCfgMisc::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgOssCfgMisc& XmsgOssCfgMisc::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgMisc();
  return *internal_default_instance();
}

XmsgOssCfgMisc* XmsgOssCfgMisc::New(::google::protobuf::Arena* arena) const {
  XmsgOssCfgMisc* n = new XmsgOssCfgMisc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgOssCfgMisc::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgOssCfgMisc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipfsnode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&objhashsegment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipfsdownloadthread_) -
      reinterpret_cast<char*>(&objhashsegment_)) + sizeof(ipfsdownloadthread_));
  _internal_metadata_.Clear();
}

bool XmsgOssCfgMisc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgOssCfgMisc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string objPath = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->objpath().data(), static_cast<int>(this->objpath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgOssCfgMisc.objPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 objHashSegment = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objhashsegment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 objDownloadThread = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objdownloadthread_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 objInfoCached = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objinfocached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 objInfoLru = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objinfolru_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 objDownloadWriteBufSize = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objdownloadwritebufsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgOssStorageType storage = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_storage(static_cast< ::XmsgOssStorageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ipfsNode = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipfsnode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipfsnode().data(), static_cast<int>(this->ipfsnode().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgOssCfgMisc.ipfsNode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ipfsUploadThread = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipfsuploadthread_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ipfsDownloadThread = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipfsdownloadthread_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgOssCfgMisc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgOssCfgMisc)
  return false;
#undef DO_
}

void XmsgOssCfgMisc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgOssCfgMisc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string objPath = 1;
  if (this->objpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->objpath().data(), static_cast<int>(this->objpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgMisc.objPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->objpath(), output);
  }

  // uint32 objHashSegment = 2;
  if (this->objhashsegment() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->objhashsegment(), output);
  }

  // uint32 objDownloadThread = 3;
  if (this->objdownloadthread() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->objdownloadthread(), output);
  }

  // uint32 objInfoCached = 4;
  if (this->objinfocached() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->objinfocached(), output);
  }

  // uint32 objInfoLru = 5;
  if (this->objinfolru() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->objinfolru(), output);
  }

  // uint32 objDownloadWriteBufSize = 6;
  if (this->objdownloadwritebufsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->objdownloadwritebufsize(), output);
  }

  // .XmsgOssStorageType storage = 7;
  if (this->storage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->storage(), output);
  }

  // string ipfsNode = 8;
  if (this->ipfsnode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipfsnode().data(), static_cast<int>(this->ipfsnode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgMisc.ipfsNode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->ipfsnode(), output);
  }

  // uint32 ipfsUploadThread = 9;
  if (this->ipfsuploadthread() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ipfsuploadthread(), output);
  }

  // uint32 ipfsDownloadThread = 10;
  if (this->ipfsdownloadthread() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->ipfsdownloadthread(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgOssCfgMisc)
}

::google::protobuf::uint8* XmsgOssCfgMisc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgOssCfgMisc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string objPath = 1;
  if (this->objpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->objpath().data(), static_cast<int>(this->objpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgMisc.objPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->objpath(), target);
  }

  // uint32 objHashSegment = 2;
  if (this->objhashsegment() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->objhashsegment(), target);
  }

  // uint32 objDownloadThread = 3;
  if (this->objdownloadthread() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->objdownloadthread(), target);
  }

  // uint32 objInfoCached = 4;
  if (this->objinfocached() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->objinfocached(), target);
  }

  // uint32 objInfoLru = 5;
  if (this->objinfolru() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->objinfolru(), target);
  }

  // uint32 objDownloadWriteBufSize = 6;
  if (this->objdownloadwritebufsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->objdownloadwritebufsize(), target);
  }

  // .XmsgOssStorageType storage = 7;
  if (this->storage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->storage(), target);
  }

  // string ipfsNode = 8;
  if (this->ipfsnode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipfsnode().data(), static_cast<int>(this->ipfsnode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgOssCfgMisc.ipfsNode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ipfsnode(), target);
  }

  // uint32 ipfsUploadThread = 9;
  if (this->ipfsuploadthread() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ipfsuploadthread(), target);
  }

  // uint32 ipfsDownloadThread = 10;
  if (this->ipfsdownloadthread() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->ipfsdownloadthread(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgOssCfgMisc)
  return target;
}

size_t XmsgOssCfgMisc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgOssCfgMisc)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string objPath = 1;
  if (this->objpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->objpath());
  }

  // string ipfsNode = 8;
  if (this->ipfsnode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipfsnode());
  }

  // uint32 objHashSegment = 2;
  if (this->objhashsegment() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->objhashsegment());
  }

  // uint32 objDownloadThread = 3;
  if (this->objdownloadthread() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->objdownloadthread());
  }

  // uint32 objInfoCached = 4;
  if (this->objinfocached() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->objinfocached());
  }

  // uint32 objInfoLru = 5;
  if (this->objinfolru() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->objinfolru());
  }

  // uint32 objDownloadWriteBufSize = 6;
  if (this->objdownloadwritebufsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->objdownloadwritebufsize());
  }

  // .XmsgOssStorageType storage = 7;
  if (this->storage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->storage());
  }

  // uint32 ipfsUploadThread = 9;
  if (this->ipfsuploadthread() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ipfsuploadthread());
  }

  // uint32 ipfsDownloadThread = 10;
  if (this->ipfsdownloadthread() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ipfsdownloadthread());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgOssCfgMisc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgOssCfgMisc)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgOssCfgMisc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgOssCfgMisc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgOssCfgMisc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgOssCfgMisc)
    MergeFrom(*source);
  }
}

void XmsgOssCfgMisc::MergeFrom(const XmsgOssCfgMisc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgOssCfgMisc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.objpath().size() > 0) {

    objpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.objpath_);
  }
  if (from.ipfsnode().size() > 0) {

    ipfsnode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipfsnode_);
  }
  if (from.objhashsegment() != 0) {
    set_objhashsegment(from.objhashsegment());
  }
  if (from.objdownloadthread() != 0) {
    set_objdownloadthread(from.objdownloadthread());
  }
  if (from.objinfocached() != 0) {
    set_objinfocached(from.objinfocached());
  }
  if (from.objinfolru() != 0) {
    set_objinfolru(from.objinfolru());
  }
  if (from.objdownloadwritebufsize() != 0) {
    set_objdownloadwritebufsize(from.objdownloadwritebufsize());
  }
  if (from.storage() != 0) {
    set_storage(from.storage());
  }
  if (from.ipfsuploadthread() != 0) {
    set_ipfsuploadthread(from.ipfsuploadthread());
  }
  if (from.ipfsdownloadthread() != 0) {
    set_ipfsdownloadthread(from.ipfsdownloadthread());
  }
}

void XmsgOssCfgMisc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgOssCfgMisc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgOssCfgMisc::CopyFrom(const XmsgOssCfgMisc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgOssCfgMisc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgOssCfgMisc::IsInitialized() const {
  return true;
}

void XmsgOssCfgMisc::Swap(XmsgOssCfgMisc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgOssCfgMisc::InternalSwap(XmsgOssCfgMisc* other) {
  using std::swap;
  objpath_.Swap(&other->objpath_);
  ipfsnode_.Swap(&other->ipfsnode_);
  swap(objhashsegment_, other->objhashsegment_);
  swap(objdownloadthread_, other->objdownloadthread_);
  swap(objinfocached_, other->objinfocached_);
  swap(objinfolru_, other->objinfolru_);
  swap(objdownloadwritebufsize_, other->objdownloadwritebufsize_);
  swap(storage_, other->storage_);
  swap(ipfsuploadthread_, other->ipfsuploadthread_);
  swap(ipfsdownloadthread_, other->ipfsdownloadthread_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgOssCfgMisc::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2doss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

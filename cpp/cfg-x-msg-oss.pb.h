// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cfg-x-msg-oss.proto

#ifndef PROTOBUF_cfg_2dx_2dmsg_2doss_2eproto__INCLUDED
#define PROTOBUF_cfg_2dx_2dmsg_2doss_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_cfg_2dx_2dmsg_2doss_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsXmsgOssCfgPbImpl();
void InitDefaultsXmsgOssCfgPb();
void InitDefaultsXmsgOssCfgMongodbImpl();
void InitDefaultsXmsgOssCfgMongodb();
void InitDefaultsXmsgOssCfgMysqlImpl();
void InitDefaultsXmsgOssCfgMysql();
void InitDefaultsXmsgOssCfgLogImpl();
void InitDefaultsXmsgOssCfgLog();
void InitDefaultsXmsgOssCfgXscTcpServerImpl();
void InitDefaultsXmsgOssCfgXscTcpServer();
void InitDefaultsXmsgOssCfgXscHttpServerImpl();
void InitDefaultsXmsgOssCfgXscHttpServer();
void InitDefaultsXmsgOssCfgXmsgNeH2nAddrImpl();
void InitDefaultsXmsgOssCfgXmsgNeH2nAddr();
void InitDefaultsXmsgOssCfgXmsgNeN2hAddrImpl();
void InitDefaultsXmsgOssCfgXmsgNeN2hAddr();
void InitDefaultsXmsgOssCfgMiscImpl();
void InitDefaultsXmsgOssCfgMisc();
inline void InitDefaults() {
  InitDefaultsXmsgOssCfgPb();
  InitDefaultsXmsgOssCfgMongodb();
  InitDefaultsXmsgOssCfgMysql();
  InitDefaultsXmsgOssCfgLog();
  InitDefaultsXmsgOssCfgXscTcpServer();
  InitDefaultsXmsgOssCfgXscHttpServer();
  InitDefaultsXmsgOssCfgXmsgNeH2nAddr();
  InitDefaultsXmsgOssCfgXmsgNeN2hAddr();
  InitDefaultsXmsgOssCfgMisc();
}
}  // namespace protobuf_cfg_2dx_2dmsg_2doss_2eproto
class XmsgOssCfgLog;
class XmsgOssCfgLogDefaultTypeInternal;
extern XmsgOssCfgLogDefaultTypeInternal _XmsgOssCfgLog_default_instance_;
class XmsgOssCfgMisc;
class XmsgOssCfgMiscDefaultTypeInternal;
extern XmsgOssCfgMiscDefaultTypeInternal _XmsgOssCfgMisc_default_instance_;
class XmsgOssCfgMongodb;
class XmsgOssCfgMongodbDefaultTypeInternal;
extern XmsgOssCfgMongodbDefaultTypeInternal _XmsgOssCfgMongodb_default_instance_;
class XmsgOssCfgMysql;
class XmsgOssCfgMysqlDefaultTypeInternal;
extern XmsgOssCfgMysqlDefaultTypeInternal _XmsgOssCfgMysql_default_instance_;
class XmsgOssCfgPb;
class XmsgOssCfgPbDefaultTypeInternal;
extern XmsgOssCfgPbDefaultTypeInternal _XmsgOssCfgPb_default_instance_;
class XmsgOssCfgXmsgNeH2nAddr;
class XmsgOssCfgXmsgNeH2nAddrDefaultTypeInternal;
extern XmsgOssCfgXmsgNeH2nAddrDefaultTypeInternal _XmsgOssCfgXmsgNeH2nAddr_default_instance_;
class XmsgOssCfgXmsgNeN2hAddr;
class XmsgOssCfgXmsgNeN2hAddrDefaultTypeInternal;
extern XmsgOssCfgXmsgNeN2hAddrDefaultTypeInternal _XmsgOssCfgXmsgNeN2hAddr_default_instance_;
class XmsgOssCfgXscHttpServer;
class XmsgOssCfgXscHttpServerDefaultTypeInternal;
extern XmsgOssCfgXscHttpServerDefaultTypeInternal _XmsgOssCfgXscHttpServer_default_instance_;
class XmsgOssCfgXscTcpServer;
class XmsgOssCfgXscTcpServerDefaultTypeInternal;
extern XmsgOssCfgXscTcpServerDefaultTypeInternal _XmsgOssCfgXscTcpServer_default_instance_;

enum XmsgOssStorageType {
  X_MSG_OSS_STORAGE_TYPE_DISK = 0,
  X_MSG_OSS_STORAGE_TYPE_IPFS = 2,
  XmsgOssStorageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  XmsgOssStorageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool XmsgOssStorageType_IsValid(int value);
const XmsgOssStorageType XmsgOssStorageType_MIN = X_MSG_OSS_STORAGE_TYPE_DISK;
const XmsgOssStorageType XmsgOssStorageType_MAX = X_MSG_OSS_STORAGE_TYPE_IPFS;
const int XmsgOssStorageType_ARRAYSIZE = XmsgOssStorageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* XmsgOssStorageType_descriptor();
inline const ::std::string& XmsgOssStorageType_Name(XmsgOssStorageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    XmsgOssStorageType_descriptor(), value);
}
inline bool XmsgOssStorageType_Parse(
    const ::std::string& name, XmsgOssStorageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<XmsgOssStorageType>(
    XmsgOssStorageType_descriptor(), name, value);
}
// ===================================================================

class XmsgOssCfgPb : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgOssCfgPb) */ {
 public:
  XmsgOssCfgPb();
  virtual ~XmsgOssCfgPb();

  XmsgOssCfgPb(const XmsgOssCfgPb& from);

  inline XmsgOssCfgPb& operator=(const XmsgOssCfgPb& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgOssCfgPb(XmsgOssCfgPb&& from) noexcept
    : XmsgOssCfgPb() {
    *this = ::std::move(from);
  }

  inline XmsgOssCfgPb& operator=(XmsgOssCfgPb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgOssCfgPb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgOssCfgPb* internal_default_instance() {
    return reinterpret_cast<const XmsgOssCfgPb*>(
               &_XmsgOssCfgPb_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(XmsgOssCfgPb* other);
  friend void swap(XmsgOssCfgPb& a, XmsgOssCfgPb& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgOssCfgPb* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgOssCfgPb* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgOssCfgPb& from);
  void MergeFrom(const XmsgOssCfgPb& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgOssCfgPb* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .XmsgOssCfgXmsgNeH2nAddr h2n = 8;
  int h2n_size() const;
  void clear_h2n();
  static const int kH2NFieldNumber = 8;
  const ::XmsgOssCfgXmsgNeH2nAddr& h2n(int index) const;
  ::XmsgOssCfgXmsgNeH2nAddr* mutable_h2n(int index);
  ::XmsgOssCfgXmsgNeH2nAddr* add_h2n();
  ::google::protobuf::RepeatedPtrField< ::XmsgOssCfgXmsgNeH2nAddr >*
      mutable_h2n();
  const ::google::protobuf::RepeatedPtrField< ::XmsgOssCfgXmsgNeH2nAddr >&
      h2n() const;

  // repeated .XmsgOssCfgXmsgNeN2hAddr n2h = 9;
  int n2h_size() const;
  void clear_n2h();
  static const int kN2HFieldNumber = 9;
  const ::XmsgOssCfgXmsgNeN2hAddr& n2h(int index) const;
  ::XmsgOssCfgXmsgNeN2hAddr* mutable_n2h(int index);
  ::XmsgOssCfgXmsgNeN2hAddr* add_n2h();
  ::google::protobuf::RepeatedPtrField< ::XmsgOssCfgXmsgNeN2hAddr >*
      mutable_n2h();
  const ::google::protobuf::RepeatedPtrField< ::XmsgOssCfgXmsgNeN2hAddr >&
      n2h() const;

  // string cgt = 1;
  void clear_cgt();
  static const int kCgtFieldNumber = 1;
  const ::std::string& cgt() const;
  void set_cgt(const ::std::string& value);
  #if LANG_CXX11
  void set_cgt(::std::string&& value);
  #endif
  void set_cgt(const char* value);
  void set_cgt(const char* value, size_t size);
  ::std::string* mutable_cgt();
  ::std::string* release_cgt();
  void set_allocated_cgt(::std::string* cgt);

  // string cfgType = 2;
  void clear_cfgtype();
  static const int kCfgTypeFieldNumber = 2;
  const ::std::string& cfgtype() const;
  void set_cfgtype(const ::std::string& value);
  #if LANG_CXX11
  void set_cfgtype(::std::string&& value);
  #endif
  void set_cfgtype(const char* value);
  void set_cfgtype(const char* value, size_t size);
  ::std::string* mutable_cfgtype();
  ::std::string* release_cfgtype();
  void set_allocated_cfgtype(::std::string* cfgtype);

  // .XmsgOssCfgMongodb mongodb = 3;
  bool has_mongodb() const;
  void clear_mongodb();
  static const int kMongodbFieldNumber = 3;
  const ::XmsgOssCfgMongodb& mongodb() const;
  ::XmsgOssCfgMongodb* release_mongodb();
  ::XmsgOssCfgMongodb* mutable_mongodb();
  void set_allocated_mongodb(::XmsgOssCfgMongodb* mongodb);

  // .XmsgOssCfgMysql mysql = 4;
  bool has_mysql() const;
  void clear_mysql();
  static const int kMysqlFieldNumber = 4;
  const ::XmsgOssCfgMysql& mysql() const;
  ::XmsgOssCfgMysql* release_mysql();
  ::XmsgOssCfgMysql* mutable_mysql();
  void set_allocated_mysql(::XmsgOssCfgMysql* mysql);

  // .XmsgOssCfgLog log = 5;
  bool has_log() const;
  void clear_log();
  static const int kLogFieldNumber = 5;
  const ::XmsgOssCfgLog& log() const;
  ::XmsgOssCfgLog* release_log();
  ::XmsgOssCfgLog* mutable_log();
  void set_allocated_log(::XmsgOssCfgLog* log);

  // .XmsgOssCfgXscHttpServer pubHttp = 6;
  bool has_pubhttp() const;
  void clear_pubhttp();
  static const int kPubHttpFieldNumber = 6;
  const ::XmsgOssCfgXscHttpServer& pubhttp() const;
  ::XmsgOssCfgXscHttpServer* release_pubhttp();
  ::XmsgOssCfgXscHttpServer* mutable_pubhttp();
  void set_allocated_pubhttp(::XmsgOssCfgXscHttpServer* pubhttp);

  // .XmsgOssCfgXscTcpServer priTcp = 7;
  bool has_pritcp() const;
  void clear_pritcp();
  static const int kPriTcpFieldNumber = 7;
  const ::XmsgOssCfgXscTcpServer& pritcp() const;
  ::XmsgOssCfgXscTcpServer* release_pritcp();
  ::XmsgOssCfgXscTcpServer* mutable_pritcp();
  void set_allocated_pritcp(::XmsgOssCfgXscTcpServer* pritcp);

  // .XmsgOssCfgMisc misc = 10;
  bool has_misc() const;
  void clear_misc();
  static const int kMiscFieldNumber = 10;
  const ::XmsgOssCfgMisc& misc() const;
  ::XmsgOssCfgMisc* release_misc();
  ::XmsgOssCfgMisc* mutable_misc();
  void set_allocated_misc(::XmsgOssCfgMisc* misc);

  // @@protoc_insertion_point(class_scope:XmsgOssCfgPb)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::XmsgOssCfgXmsgNeH2nAddr > h2n_;
  ::google::protobuf::RepeatedPtrField< ::XmsgOssCfgXmsgNeN2hAddr > n2h_;
  ::google::protobuf::internal::ArenaStringPtr cgt_;
  ::google::protobuf::internal::ArenaStringPtr cfgtype_;
  ::XmsgOssCfgMongodb* mongodb_;
  ::XmsgOssCfgMysql* mysql_;
  ::XmsgOssCfgLog* log_;
  ::XmsgOssCfgXscHttpServer* pubhttp_;
  ::XmsgOssCfgXscTcpServer* pritcp_;
  ::XmsgOssCfgMisc* misc_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgPbImpl();
};
// -------------------------------------------------------------------

class XmsgOssCfgMongodb : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgOssCfgMongodb) */ {
 public:
  XmsgOssCfgMongodb();
  virtual ~XmsgOssCfgMongodb();

  XmsgOssCfgMongodb(const XmsgOssCfgMongodb& from);

  inline XmsgOssCfgMongodb& operator=(const XmsgOssCfgMongodb& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgOssCfgMongodb(XmsgOssCfgMongodb&& from) noexcept
    : XmsgOssCfgMongodb() {
    *this = ::std::move(from);
  }

  inline XmsgOssCfgMongodb& operator=(XmsgOssCfgMongodb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgOssCfgMongodb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgOssCfgMongodb* internal_default_instance() {
    return reinterpret_cast<const XmsgOssCfgMongodb*>(
               &_XmsgOssCfgMongodb_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(XmsgOssCfgMongodb* other);
  friend void swap(XmsgOssCfgMongodb& a, XmsgOssCfgMongodb& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgOssCfgMongodb* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgOssCfgMongodb* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgOssCfgMongodb& from);
  void MergeFrom(const XmsgOssCfgMongodb& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgOssCfgMongodb* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uri = 1;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // @@protoc_insertion_point(class_scope:XmsgOssCfgMongodb)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgMongodbImpl();
};
// -------------------------------------------------------------------

class XmsgOssCfgMysql : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgOssCfgMysql) */ {
 public:
  XmsgOssCfgMysql();
  virtual ~XmsgOssCfgMysql();

  XmsgOssCfgMysql(const XmsgOssCfgMysql& from);

  inline XmsgOssCfgMysql& operator=(const XmsgOssCfgMysql& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgOssCfgMysql(XmsgOssCfgMysql&& from) noexcept
    : XmsgOssCfgMysql() {
    *this = ::std::move(from);
  }

  inline XmsgOssCfgMysql& operator=(XmsgOssCfgMysql&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgOssCfgMysql& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgOssCfgMysql* internal_default_instance() {
    return reinterpret_cast<const XmsgOssCfgMysql*>(
               &_XmsgOssCfgMysql_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(XmsgOssCfgMysql* other);
  friend void swap(XmsgOssCfgMysql& a, XmsgOssCfgMysql& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgOssCfgMysql* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgOssCfgMysql* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgOssCfgMysql& from);
  void MergeFrom(const XmsgOssCfgMysql& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgOssCfgMysql* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host = 1;
  void clear_host();
  static const int kHostFieldNumber = 1;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // string db = 3;
  void clear_db();
  static const int kDbFieldNumber = 3;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // string usr = 4;
  void clear_usr();
  static const int kUsrFieldNumber = 4;
  const ::std::string& usr() const;
  void set_usr(const ::std::string& value);
  #if LANG_CXX11
  void set_usr(::std::string&& value);
  #endif
  void set_usr(const char* value);
  void set_usr(const char* value, size_t size);
  ::std::string* mutable_usr();
  ::std::string* release_usr();
  void set_allocated_usr(::std::string* usr);

  // string password = 5;
  void clear_password();
  static const int kPasswordFieldNumber = 5;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // uint32 poolSize = 6;
  void clear_poolsize();
  static const int kPoolSizeFieldNumber = 6;
  ::google::protobuf::uint32 poolsize() const;
  void set_poolsize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgOssCfgMysql)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::internal::ArenaStringPtr usr_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 poolsize_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgMysqlImpl();
};
// -------------------------------------------------------------------

class XmsgOssCfgLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgOssCfgLog) */ {
 public:
  XmsgOssCfgLog();
  virtual ~XmsgOssCfgLog();

  XmsgOssCfgLog(const XmsgOssCfgLog& from);

  inline XmsgOssCfgLog& operator=(const XmsgOssCfgLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgOssCfgLog(XmsgOssCfgLog&& from) noexcept
    : XmsgOssCfgLog() {
    *this = ::std::move(from);
  }

  inline XmsgOssCfgLog& operator=(XmsgOssCfgLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgOssCfgLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgOssCfgLog* internal_default_instance() {
    return reinterpret_cast<const XmsgOssCfgLog*>(
               &_XmsgOssCfgLog_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(XmsgOssCfgLog* other);
  friend void swap(XmsgOssCfgLog& a, XmsgOssCfgLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgOssCfgLog* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgOssCfgLog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgOssCfgLog& from);
  void MergeFrom(const XmsgOssCfgLog& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgOssCfgLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  const ::std::string& level() const;
  void set_level(const ::std::string& value);
  #if LANG_CXX11
  void set_level(::std::string&& value);
  #endif
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  ::std::string* mutable_level();
  ::std::string* release_level();
  void set_allocated_level(::std::string* level);

  // string output = 2;
  void clear_output();
  static const int kOutputFieldNumber = 2;
  const ::std::string& output() const;
  void set_output(const ::std::string& value);
  #if LANG_CXX11
  void set_output(::std::string&& value);
  #endif
  void set_output(const char* value);
  void set_output(const char* value, size_t size);
  ::std::string* mutable_output();
  ::std::string* release_output();
  void set_allocated_output(::std::string* output);

  // @@protoc_insertion_point(class_scope:XmsgOssCfgLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr level_;
  ::google::protobuf::internal::ArenaStringPtr output_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgLogImpl();
};
// -------------------------------------------------------------------

class XmsgOssCfgXscTcpServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgOssCfgXscTcpServer) */ {
 public:
  XmsgOssCfgXscTcpServer();
  virtual ~XmsgOssCfgXscTcpServer();

  XmsgOssCfgXscTcpServer(const XmsgOssCfgXscTcpServer& from);

  inline XmsgOssCfgXscTcpServer& operator=(const XmsgOssCfgXscTcpServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgOssCfgXscTcpServer(XmsgOssCfgXscTcpServer&& from) noexcept
    : XmsgOssCfgXscTcpServer() {
    *this = ::std::move(from);
  }

  inline XmsgOssCfgXscTcpServer& operator=(XmsgOssCfgXscTcpServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgOssCfgXscTcpServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgOssCfgXscTcpServer* internal_default_instance() {
    return reinterpret_cast<const XmsgOssCfgXscTcpServer*>(
               &_XmsgOssCfgXscTcpServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(XmsgOssCfgXscTcpServer* other);
  friend void swap(XmsgOssCfgXscTcpServer& a, XmsgOssCfgXscTcpServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgOssCfgXscTcpServer* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgOssCfgXscTcpServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgOssCfgXscTcpServer& from);
  void MergeFrom(const XmsgOssCfgXscTcpServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgOssCfgXscTcpServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string addr = 1;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // uint32 worker = 2;
  void clear_worker();
  static const int kWorkerFieldNumber = 2;
  ::google::protobuf::uint32 worker() const;
  void set_worker(::google::protobuf::uint32 value);

  // uint32 peerLimit = 3;
  void clear_peerlimit();
  static const int kPeerLimitFieldNumber = 3;
  ::google::protobuf::uint32 peerlimit() const;
  void set_peerlimit(::google::protobuf::uint32 value);

  // uint32 peerMtu = 4;
  void clear_peermtu();
  static const int kPeerMtuFieldNumber = 4;
  ::google::protobuf::uint32 peermtu() const;
  void set_peermtu(::google::protobuf::uint32 value);

  // uint32 peerRcvBuf = 5;
  void clear_peerrcvbuf();
  static const int kPeerRcvBufFieldNumber = 5;
  ::google::protobuf::uint32 peerrcvbuf() const;
  void set_peerrcvbuf(::google::protobuf::uint32 value);

  // uint32 peerSndBuf = 6;
  void clear_peersndbuf();
  static const int kPeerSndBufFieldNumber = 6;
  ::google::protobuf::uint32 peersndbuf() const;
  void set_peersndbuf(::google::protobuf::uint32 value);

  // uint32 lazyClose = 7;
  void clear_lazyclose();
  static const int kLazyCloseFieldNumber = 7;
  ::google::protobuf::uint32 lazyclose() const;
  void set_lazyclose(::google::protobuf::uint32 value);

  // uint32 heartbeat = 9;
  void clear_heartbeat();
  static const int kHeartbeatFieldNumber = 9;
  ::google::protobuf::uint32 heartbeat() const;
  void set_heartbeat(::google::protobuf::uint32 value);

  // uint32 n2hZombie = 10;
  void clear_n2hzombie();
  static const int kN2HZombieFieldNumber = 10;
  ::google::protobuf::uint32 n2hzombie() const;
  void set_n2hzombie(::google::protobuf::uint32 value);

  // bool tracing = 8;
  void clear_tracing();
  static const int kTracingFieldNumber = 8;
  bool tracing() const;
  void set_tracing(bool value);

  // bool n2hTracing = 12;
  void clear_n2htracing();
  static const int kN2HTracingFieldNumber = 12;
  bool n2htracing() const;
  void set_n2htracing(bool value);

  // uint32 n2hTransTimeout = 11;
  void clear_n2htranstimeout();
  static const int kN2HTransTimeoutFieldNumber = 11;
  ::google::protobuf::uint32 n2htranstimeout() const;
  void set_n2htranstimeout(::google::protobuf::uint32 value);

  // uint32 h2nReConn = 13;
  void clear_h2nreconn();
  static const int kH2NReConnFieldNumber = 13;
  ::google::protobuf::uint32 h2nreconn() const;
  void set_h2nreconn(::google::protobuf::uint32 value);

  // uint32 h2nTransTimeout = 14;
  void clear_h2ntranstimeout();
  static const int kH2NTransTimeoutFieldNumber = 14;
  ::google::protobuf::uint32 h2ntranstimeout() const;
  void set_h2ntranstimeout(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgOssCfgXscTcpServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::uint32 worker_;
  ::google::protobuf::uint32 peerlimit_;
  ::google::protobuf::uint32 peermtu_;
  ::google::protobuf::uint32 peerrcvbuf_;
  ::google::protobuf::uint32 peersndbuf_;
  ::google::protobuf::uint32 lazyclose_;
  ::google::protobuf::uint32 heartbeat_;
  ::google::protobuf::uint32 n2hzombie_;
  bool tracing_;
  bool n2htracing_;
  ::google::protobuf::uint32 n2htranstimeout_;
  ::google::protobuf::uint32 h2nreconn_;
  ::google::protobuf::uint32 h2ntranstimeout_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgXscTcpServerImpl();
};
// -------------------------------------------------------------------

class XmsgOssCfgXscHttpServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgOssCfgXscHttpServer) */ {
 public:
  XmsgOssCfgXscHttpServer();
  virtual ~XmsgOssCfgXscHttpServer();

  XmsgOssCfgXscHttpServer(const XmsgOssCfgXscHttpServer& from);

  inline XmsgOssCfgXscHttpServer& operator=(const XmsgOssCfgXscHttpServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgOssCfgXscHttpServer(XmsgOssCfgXscHttpServer&& from) noexcept
    : XmsgOssCfgXscHttpServer() {
    *this = ::std::move(from);
  }

  inline XmsgOssCfgXscHttpServer& operator=(XmsgOssCfgXscHttpServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgOssCfgXscHttpServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgOssCfgXscHttpServer* internal_default_instance() {
    return reinterpret_cast<const XmsgOssCfgXscHttpServer*>(
               &_XmsgOssCfgXscHttpServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(XmsgOssCfgXscHttpServer* other);
  friend void swap(XmsgOssCfgXscHttpServer& a, XmsgOssCfgXscHttpServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgOssCfgXscHttpServer* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgOssCfgXscHttpServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgOssCfgXscHttpServer& from);
  void MergeFrom(const XmsgOssCfgXscHttpServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgOssCfgXscHttpServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string requiredHeader = 5;
  int requiredheader_size() const;
  void clear_requiredheader();
  static const int kRequiredHeaderFieldNumber = 5;
  const ::std::string& requiredheader(int index) const;
  ::std::string* mutable_requiredheader(int index);
  void set_requiredheader(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_requiredheader(int index, ::std::string&& value);
  #endif
  void set_requiredheader(int index, const char* value);
  void set_requiredheader(int index, const char* value, size_t size);
  ::std::string* add_requiredheader();
  void add_requiredheader(const ::std::string& value);
  #if LANG_CXX11
  void add_requiredheader(::std::string&& value);
  #endif
  void add_requiredheader(const char* value);
  void add_requiredheader(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& requiredheader() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_requiredheader();

  // .XmsgOssCfgXscTcpServer tcp = 1;
  bool has_tcp() const;
  void clear_tcp();
  static const int kTcpFieldNumber = 1;
  const ::XmsgOssCfgXscTcpServer& tcp() const;
  ::XmsgOssCfgXscTcpServer* release_tcp();
  ::XmsgOssCfgXscTcpServer* mutable_tcp();
  void set_allocated_tcp(::XmsgOssCfgXscTcpServer* tcp);

  // uint32 headerLimit = 2;
  void clear_headerlimit();
  static const int kHeaderLimitFieldNumber = 2;
  ::google::protobuf::uint32 headerlimit() const;
  void set_headerlimit(::google::protobuf::uint32 value);

  // uint32 bodyLimit = 3;
  void clear_bodylimit();
  static const int kBodyLimitFieldNumber = 3;
  ::google::protobuf::uint32 bodylimit() const;
  void set_bodylimit(::google::protobuf::uint32 value);

  // uint32 closeWait = 4;
  void clear_closewait();
  static const int kCloseWaitFieldNumber = 4;
  ::google::protobuf::uint32 closewait() const;
  void set_closewait(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgOssCfgXscHttpServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> requiredheader_;
  ::XmsgOssCfgXscTcpServer* tcp_;
  ::google::protobuf::uint32 headerlimit_;
  ::google::protobuf::uint32 bodylimit_;
  ::google::protobuf::uint32 closewait_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgXscHttpServerImpl();
};
// -------------------------------------------------------------------

class XmsgOssCfgXmsgNeH2nAddr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgOssCfgXmsgNeH2nAddr) */ {
 public:
  XmsgOssCfgXmsgNeH2nAddr();
  virtual ~XmsgOssCfgXmsgNeH2nAddr();

  XmsgOssCfgXmsgNeH2nAddr(const XmsgOssCfgXmsgNeH2nAddr& from);

  inline XmsgOssCfgXmsgNeH2nAddr& operator=(const XmsgOssCfgXmsgNeH2nAddr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgOssCfgXmsgNeH2nAddr(XmsgOssCfgXmsgNeH2nAddr&& from) noexcept
    : XmsgOssCfgXmsgNeH2nAddr() {
    *this = ::std::move(from);
  }

  inline XmsgOssCfgXmsgNeH2nAddr& operator=(XmsgOssCfgXmsgNeH2nAddr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgOssCfgXmsgNeH2nAddr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgOssCfgXmsgNeH2nAddr* internal_default_instance() {
    return reinterpret_cast<const XmsgOssCfgXmsgNeH2nAddr*>(
               &_XmsgOssCfgXmsgNeH2nAddr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(XmsgOssCfgXmsgNeH2nAddr* other);
  friend void swap(XmsgOssCfgXmsgNeH2nAddr& a, XmsgOssCfgXmsgNeH2nAddr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgOssCfgXmsgNeH2nAddr* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgOssCfgXmsgNeH2nAddr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgOssCfgXmsgNeH2nAddr& from);
  void MergeFrom(const XmsgOssCfgXmsgNeH2nAddr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgOssCfgXmsgNeH2nAddr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string neg = 1;
  void clear_neg();
  static const int kNegFieldNumber = 1;
  const ::std::string& neg() const;
  void set_neg(const ::std::string& value);
  #if LANG_CXX11
  void set_neg(::std::string&& value);
  #endif
  void set_neg(const char* value);
  void set_neg(const char* value, size_t size);
  ::std::string* mutable_neg();
  ::std::string* release_neg();
  void set_allocated_neg(::std::string* neg);

  // string addr = 2;
  void clear_addr();
  static const int kAddrFieldNumber = 2;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // string pwd = 3;
  void clear_pwd();
  static const int kPwdFieldNumber = 3;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // string alg = 4;
  void clear_alg();
  static const int kAlgFieldNumber = 4;
  const ::std::string& alg() const;
  void set_alg(const ::std::string& value);
  #if LANG_CXX11
  void set_alg(::std::string&& value);
  #endif
  void set_alg(const char* value);
  void set_alg(const char* value, size_t size);
  ::std::string* mutable_alg();
  ::std::string* release_alg();
  void set_allocated_alg(::std::string* alg);

  // uint32 redundant = 5;
  void clear_redundant();
  static const int kRedundantFieldNumber = 5;
  ::google::protobuf::uint32 redundant() const;
  void set_redundant(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgOssCfgXmsgNeH2nAddr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr neg_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr alg_;
  ::google::protobuf::uint32 redundant_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgXmsgNeH2nAddrImpl();
};
// -------------------------------------------------------------------

class XmsgOssCfgXmsgNeN2hAddr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgOssCfgXmsgNeN2hAddr) */ {
 public:
  XmsgOssCfgXmsgNeN2hAddr();
  virtual ~XmsgOssCfgXmsgNeN2hAddr();

  XmsgOssCfgXmsgNeN2hAddr(const XmsgOssCfgXmsgNeN2hAddr& from);

  inline XmsgOssCfgXmsgNeN2hAddr& operator=(const XmsgOssCfgXmsgNeN2hAddr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgOssCfgXmsgNeN2hAddr(XmsgOssCfgXmsgNeN2hAddr&& from) noexcept
    : XmsgOssCfgXmsgNeN2hAddr() {
    *this = ::std::move(from);
  }

  inline XmsgOssCfgXmsgNeN2hAddr& operator=(XmsgOssCfgXmsgNeN2hAddr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgOssCfgXmsgNeN2hAddr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgOssCfgXmsgNeN2hAddr* internal_default_instance() {
    return reinterpret_cast<const XmsgOssCfgXmsgNeN2hAddr*>(
               &_XmsgOssCfgXmsgNeN2hAddr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(XmsgOssCfgXmsgNeN2hAddr* other);
  friend void swap(XmsgOssCfgXmsgNeN2hAddr& a, XmsgOssCfgXmsgNeN2hAddr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgOssCfgXmsgNeN2hAddr* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgOssCfgXmsgNeN2hAddr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgOssCfgXmsgNeN2hAddr& from);
  void MergeFrom(const XmsgOssCfgXmsgNeN2hAddr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgOssCfgXmsgNeN2hAddr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string neg = 1;
  void clear_neg();
  static const int kNegFieldNumber = 1;
  const ::std::string& neg() const;
  void set_neg(const ::std::string& value);
  #if LANG_CXX11
  void set_neg(::std::string&& value);
  #endif
  void set_neg(const char* value);
  void set_neg(const char* value, size_t size);
  ::std::string* mutable_neg();
  ::std::string* release_neg();
  void set_allocated_neg(::std::string* neg);

  // string cgt = 2;
  void clear_cgt();
  static const int kCgtFieldNumber = 2;
  const ::std::string& cgt() const;
  void set_cgt(const ::std::string& value);
  #if LANG_CXX11
  void set_cgt(::std::string&& value);
  #endif
  void set_cgt(const char* value);
  void set_cgt(const char* value, size_t size);
  ::std::string* mutable_cgt();
  ::std::string* release_cgt();
  void set_allocated_cgt(::std::string* cgt);

  // string pwd = 3;
  void clear_pwd();
  static const int kPwdFieldNumber = 3;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // string addr = 4;
  void clear_addr();
  static const int kAddrFieldNumber = 4;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // @@protoc_insertion_point(class_scope:XmsgOssCfgXmsgNeN2hAddr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr neg_;
  ::google::protobuf::internal::ArenaStringPtr cgt_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgXmsgNeN2hAddrImpl();
};
// -------------------------------------------------------------------

class XmsgOssCfgMisc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgOssCfgMisc) */ {
 public:
  XmsgOssCfgMisc();
  virtual ~XmsgOssCfgMisc();

  XmsgOssCfgMisc(const XmsgOssCfgMisc& from);

  inline XmsgOssCfgMisc& operator=(const XmsgOssCfgMisc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgOssCfgMisc(XmsgOssCfgMisc&& from) noexcept
    : XmsgOssCfgMisc() {
    *this = ::std::move(from);
  }

  inline XmsgOssCfgMisc& operator=(XmsgOssCfgMisc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgOssCfgMisc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgOssCfgMisc* internal_default_instance() {
    return reinterpret_cast<const XmsgOssCfgMisc*>(
               &_XmsgOssCfgMisc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(XmsgOssCfgMisc* other);
  friend void swap(XmsgOssCfgMisc& a, XmsgOssCfgMisc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgOssCfgMisc* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgOssCfgMisc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgOssCfgMisc& from);
  void MergeFrom(const XmsgOssCfgMisc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgOssCfgMisc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string objPath = 1;
  void clear_objpath();
  static const int kObjPathFieldNumber = 1;
  const ::std::string& objpath() const;
  void set_objpath(const ::std::string& value);
  #if LANG_CXX11
  void set_objpath(::std::string&& value);
  #endif
  void set_objpath(const char* value);
  void set_objpath(const char* value, size_t size);
  ::std::string* mutable_objpath();
  ::std::string* release_objpath();
  void set_allocated_objpath(::std::string* objpath);

  // string ipfsNode = 8;
  void clear_ipfsnode();
  static const int kIpfsNodeFieldNumber = 8;
  const ::std::string& ipfsnode() const;
  void set_ipfsnode(const ::std::string& value);
  #if LANG_CXX11
  void set_ipfsnode(::std::string&& value);
  #endif
  void set_ipfsnode(const char* value);
  void set_ipfsnode(const char* value, size_t size);
  ::std::string* mutable_ipfsnode();
  ::std::string* release_ipfsnode();
  void set_allocated_ipfsnode(::std::string* ipfsnode);

  // uint32 objHashSegment = 2;
  void clear_objhashsegment();
  static const int kObjHashSegmentFieldNumber = 2;
  ::google::protobuf::uint32 objhashsegment() const;
  void set_objhashsegment(::google::protobuf::uint32 value);

  // uint32 objDownloadThread = 3;
  void clear_objdownloadthread();
  static const int kObjDownloadThreadFieldNumber = 3;
  ::google::protobuf::uint32 objdownloadthread() const;
  void set_objdownloadthread(::google::protobuf::uint32 value);

  // uint32 objInfoCached = 4;
  void clear_objinfocached();
  static const int kObjInfoCachedFieldNumber = 4;
  ::google::protobuf::uint32 objinfocached() const;
  void set_objinfocached(::google::protobuf::uint32 value);

  // uint32 objInfoLru = 5;
  void clear_objinfolru();
  static const int kObjInfoLruFieldNumber = 5;
  ::google::protobuf::uint32 objinfolru() const;
  void set_objinfolru(::google::protobuf::uint32 value);

  // uint32 objDownloadWriteBufSize = 6;
  void clear_objdownloadwritebufsize();
  static const int kObjDownloadWriteBufSizeFieldNumber = 6;
  ::google::protobuf::uint32 objdownloadwritebufsize() const;
  void set_objdownloadwritebufsize(::google::protobuf::uint32 value);

  // .XmsgOssStorageType storage = 7;
  void clear_storage();
  static const int kStorageFieldNumber = 7;
  ::XmsgOssStorageType storage() const;
  void set_storage(::XmsgOssStorageType value);

  // uint32 ipfsUploadThread = 9;
  void clear_ipfsuploadthread();
  static const int kIpfsUploadThreadFieldNumber = 9;
  ::google::protobuf::uint32 ipfsuploadthread() const;
  void set_ipfsuploadthread(::google::protobuf::uint32 value);

  // uint32 ipfsDownloadThread = 10;
  void clear_ipfsdownloadthread();
  static const int kIpfsDownloadThreadFieldNumber = 10;
  ::google::protobuf::uint32 ipfsdownloadthread() const;
  void set_ipfsdownloadthread(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgOssCfgMisc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr objpath_;
  ::google::protobuf::internal::ArenaStringPtr ipfsnode_;
  ::google::protobuf::uint32 objhashsegment_;
  ::google::protobuf::uint32 objdownloadthread_;
  ::google::protobuf::uint32 objinfocached_;
  ::google::protobuf::uint32 objinfolru_;
  ::google::protobuf::uint32 objdownloadwritebufsize_;
  int storage_;
  ::google::protobuf::uint32 ipfsuploadthread_;
  ::google::protobuf::uint32 ipfsdownloadthread_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2doss_2eproto::InitDefaultsXmsgOssCfgMiscImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// XmsgOssCfgPb

// string cgt = 1;
inline void XmsgOssCfgPb::clear_cgt() {
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgOssCfgPb::cgt() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgPb.cgt)
  return cgt_.GetNoArena();
}
inline void XmsgOssCfgPb::set_cgt(const ::std::string& value) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgOssCfgPb.cgt)
}
#if LANG_CXX11
inline void XmsgOssCfgPb::set_cgt(::std::string&& value) {
  
  cgt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgOssCfgPb.cgt)
}
#endif
inline void XmsgOssCfgPb::set_cgt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgOssCfgPb.cgt)
}
inline void XmsgOssCfgPb::set_cgt(const char* value, size_t size) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgOssCfgPb.cgt)
}
inline ::std::string* XmsgOssCfgPb::mutable_cgt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgPb.cgt)
  return cgt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgOssCfgPb::release_cgt() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgPb.cgt)
  
  return cgt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgOssCfgPb::set_allocated_cgt(::std::string* cgt) {
  if (cgt != NULL) {
    
  } else {
    
  }
  cgt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cgt);
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgPb.cgt)
}

// string cfgType = 2;
inline void XmsgOssCfgPb::clear_cfgtype() {
  cfgtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgOssCfgPb::cfgtype() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgPb.cfgType)
  return cfgtype_.GetNoArena();
}
inline void XmsgOssCfgPb::set_cfgtype(const ::std::string& value) {
  
  cfgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgOssCfgPb.cfgType)
}
#if LANG_CXX11
inline void XmsgOssCfgPb::set_cfgtype(::std::string&& value) {
  
  cfgtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgOssCfgPb.cfgType)
}
#endif
inline void XmsgOssCfgPb::set_cfgtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cfgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgOssCfgPb.cfgType)
}
inline void XmsgOssCfgPb::set_cfgtype(const char* value, size_t size) {
  
  cfgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgOssCfgPb.cfgType)
}
inline ::std::string* XmsgOssCfgPb::mutable_cfgtype() {
  
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgPb.cfgType)
  return cfgtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgOssCfgPb::release_cfgtype() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgPb.cfgType)
  
  return cfgtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgOssCfgPb::set_allocated_cfgtype(::std::string* cfgtype) {
  if (cfgtype != NULL) {
    
  } else {
    
  }
  cfgtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cfgtype);
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgPb.cfgType)
}

// .XmsgOssCfgMongodb mongodb = 3;
inline bool XmsgOssCfgPb::has_mongodb() const {
  return this != internal_default_instance() && mongodb_ != NULL;
}
inline void XmsgOssCfgPb::clear_mongodb() {
  if (GetArenaNoVirtual() == NULL && mongodb_ != NULL) {
    delete mongodb_;
  }
  mongodb_ = NULL;
}
inline const ::XmsgOssCfgMongodb& XmsgOssCfgPb::mongodb() const {
  const ::XmsgOssCfgMongodb* p = mongodb_;
  // @@protoc_insertion_point(field_get:XmsgOssCfgPb.mongodb)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgOssCfgMongodb*>(
      &::_XmsgOssCfgMongodb_default_instance_);
}
inline ::XmsgOssCfgMongodb* XmsgOssCfgPb::release_mongodb() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgPb.mongodb)
  
  ::XmsgOssCfgMongodb* temp = mongodb_;
  mongodb_ = NULL;
  return temp;
}
inline ::XmsgOssCfgMongodb* XmsgOssCfgPb::mutable_mongodb() {
  
  if (mongodb_ == NULL) {
    mongodb_ = new ::XmsgOssCfgMongodb;
  }
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgPb.mongodb)
  return mongodb_;
}
inline void XmsgOssCfgPb::set_allocated_mongodb(::XmsgOssCfgMongodb* mongodb) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mongodb_;
  }
  if (mongodb) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mongodb = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mongodb, submessage_arena);
    }
    
  } else {
    
  }
  mongodb_ = mongodb;
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgPb.mongodb)
}

// .XmsgOssCfgMysql mysql = 4;
inline bool XmsgOssCfgPb::has_mysql() const {
  return this != internal_default_instance() && mysql_ != NULL;
}
inline void XmsgOssCfgPb::clear_mysql() {
  if (GetArenaNoVirtual() == NULL && mysql_ != NULL) {
    delete mysql_;
  }
  mysql_ = NULL;
}
inline const ::XmsgOssCfgMysql& XmsgOssCfgPb::mysql() const {
  const ::XmsgOssCfgMysql* p = mysql_;
  // @@protoc_insertion_point(field_get:XmsgOssCfgPb.mysql)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgOssCfgMysql*>(
      &::_XmsgOssCfgMysql_default_instance_);
}
inline ::XmsgOssCfgMysql* XmsgOssCfgPb::release_mysql() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgPb.mysql)
  
  ::XmsgOssCfgMysql* temp = mysql_;
  mysql_ = NULL;
  return temp;
}
inline ::XmsgOssCfgMysql* XmsgOssCfgPb::mutable_mysql() {
  
  if (mysql_ == NULL) {
    mysql_ = new ::XmsgOssCfgMysql;
  }
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgPb.mysql)
  return mysql_;
}
inline void XmsgOssCfgPb::set_allocated_mysql(::XmsgOssCfgMysql* mysql) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mysql_;
  }
  if (mysql) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mysql = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mysql, submessage_arena);
    }
    
  } else {
    
  }
  mysql_ = mysql;
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgPb.mysql)
}

// .XmsgOssCfgLog log = 5;
inline bool XmsgOssCfgPb::has_log() const {
  return this != internal_default_instance() && log_ != NULL;
}
inline void XmsgOssCfgPb::clear_log() {
  if (GetArenaNoVirtual() == NULL && log_ != NULL) {
    delete log_;
  }
  log_ = NULL;
}
inline const ::XmsgOssCfgLog& XmsgOssCfgPb::log() const {
  const ::XmsgOssCfgLog* p = log_;
  // @@protoc_insertion_point(field_get:XmsgOssCfgPb.log)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgOssCfgLog*>(
      &::_XmsgOssCfgLog_default_instance_);
}
inline ::XmsgOssCfgLog* XmsgOssCfgPb::release_log() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgPb.log)
  
  ::XmsgOssCfgLog* temp = log_;
  log_ = NULL;
  return temp;
}
inline ::XmsgOssCfgLog* XmsgOssCfgPb::mutable_log() {
  
  if (log_ == NULL) {
    log_ = new ::XmsgOssCfgLog;
  }
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgPb.log)
  return log_;
}
inline void XmsgOssCfgPb::set_allocated_log(::XmsgOssCfgLog* log) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete log_;
  }
  if (log) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      log = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    
  } else {
    
  }
  log_ = log;
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgPb.log)
}

// .XmsgOssCfgXscHttpServer pubHttp = 6;
inline bool XmsgOssCfgPb::has_pubhttp() const {
  return this != internal_default_instance() && pubhttp_ != NULL;
}
inline void XmsgOssCfgPb::clear_pubhttp() {
  if (GetArenaNoVirtual() == NULL && pubhttp_ != NULL) {
    delete pubhttp_;
  }
  pubhttp_ = NULL;
}
inline const ::XmsgOssCfgXscHttpServer& XmsgOssCfgPb::pubhttp() const {
  const ::XmsgOssCfgXscHttpServer* p = pubhttp_;
  // @@protoc_insertion_point(field_get:XmsgOssCfgPb.pubHttp)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgOssCfgXscHttpServer*>(
      &::_XmsgOssCfgXscHttpServer_default_instance_);
}
inline ::XmsgOssCfgXscHttpServer* XmsgOssCfgPb::release_pubhttp() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgPb.pubHttp)
  
  ::XmsgOssCfgXscHttpServer* temp = pubhttp_;
  pubhttp_ = NULL;
  return temp;
}
inline ::XmsgOssCfgXscHttpServer* XmsgOssCfgPb::mutable_pubhttp() {
  
  if (pubhttp_ == NULL) {
    pubhttp_ = new ::XmsgOssCfgXscHttpServer;
  }
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgPb.pubHttp)
  return pubhttp_;
}
inline void XmsgOssCfgPb::set_allocated_pubhttp(::XmsgOssCfgXscHttpServer* pubhttp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pubhttp_;
  }
  if (pubhttp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pubhttp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pubhttp, submessage_arena);
    }
    
  } else {
    
  }
  pubhttp_ = pubhttp;
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgPb.pubHttp)
}

// .XmsgOssCfgXscTcpServer priTcp = 7;
inline bool XmsgOssCfgPb::has_pritcp() const {
  return this != internal_default_instance() && pritcp_ != NULL;
}
inline void XmsgOssCfgPb::clear_pritcp() {
  if (GetArenaNoVirtual() == NULL && pritcp_ != NULL) {
    delete pritcp_;
  }
  pritcp_ = NULL;
}
inline const ::XmsgOssCfgXscTcpServer& XmsgOssCfgPb::pritcp() const {
  const ::XmsgOssCfgXscTcpServer* p = pritcp_;
  // @@protoc_insertion_point(field_get:XmsgOssCfgPb.priTcp)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgOssCfgXscTcpServer*>(
      &::_XmsgOssCfgXscTcpServer_default_instance_);
}
inline ::XmsgOssCfgXscTcpServer* XmsgOssCfgPb::release_pritcp() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgPb.priTcp)
  
  ::XmsgOssCfgXscTcpServer* temp = pritcp_;
  pritcp_ = NULL;
  return temp;
}
inline ::XmsgOssCfgXscTcpServer* XmsgOssCfgPb::mutable_pritcp() {
  
  if (pritcp_ == NULL) {
    pritcp_ = new ::XmsgOssCfgXscTcpServer;
  }
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgPb.priTcp)
  return pritcp_;
}
inline void XmsgOssCfgPb::set_allocated_pritcp(::XmsgOssCfgXscTcpServer* pritcp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pritcp_;
  }
  if (pritcp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pritcp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pritcp, submessage_arena);
    }
    
  } else {
    
  }
  pritcp_ = pritcp;
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgPb.priTcp)
}

// repeated .XmsgOssCfgXmsgNeH2nAddr h2n = 8;
inline int XmsgOssCfgPb::h2n_size() const {
  return h2n_.size();
}
inline void XmsgOssCfgPb::clear_h2n() {
  h2n_.Clear();
}
inline const ::XmsgOssCfgXmsgNeH2nAddr& XmsgOssCfgPb::h2n(int index) const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgPb.h2n)
  return h2n_.Get(index);
}
inline ::XmsgOssCfgXmsgNeH2nAddr* XmsgOssCfgPb::mutable_h2n(int index) {
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgPb.h2n)
  return h2n_.Mutable(index);
}
inline ::XmsgOssCfgXmsgNeH2nAddr* XmsgOssCfgPb::add_h2n() {
  // @@protoc_insertion_point(field_add:XmsgOssCfgPb.h2n)
  return h2n_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::XmsgOssCfgXmsgNeH2nAddr >*
XmsgOssCfgPb::mutable_h2n() {
  // @@protoc_insertion_point(field_mutable_list:XmsgOssCfgPb.h2n)
  return &h2n_;
}
inline const ::google::protobuf::RepeatedPtrField< ::XmsgOssCfgXmsgNeH2nAddr >&
XmsgOssCfgPb::h2n() const {
  // @@protoc_insertion_point(field_list:XmsgOssCfgPb.h2n)
  return h2n_;
}

// repeated .XmsgOssCfgXmsgNeN2hAddr n2h = 9;
inline int XmsgOssCfgPb::n2h_size() const {
  return n2h_.size();
}
inline void XmsgOssCfgPb::clear_n2h() {
  n2h_.Clear();
}
inline const ::XmsgOssCfgXmsgNeN2hAddr& XmsgOssCfgPb::n2h(int index) const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgPb.n2h)
  return n2h_.Get(index);
}
inline ::XmsgOssCfgXmsgNeN2hAddr* XmsgOssCfgPb::mutable_n2h(int index) {
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgPb.n2h)
  return n2h_.Mutable(index);
}
inline ::XmsgOssCfgXmsgNeN2hAddr* XmsgOssCfgPb::add_n2h() {
  // @@protoc_insertion_point(field_add:XmsgOssCfgPb.n2h)
  return n2h_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::XmsgOssCfgXmsgNeN2hAddr >*
XmsgOssCfgPb::mutable_n2h() {
  // @@protoc_insertion_point(field_mutable_list:XmsgOssCfgPb.n2h)
  return &n2h_;
}
inline const ::google::protobuf::RepeatedPtrField< ::XmsgOssCfgXmsgNeN2hAddr >&
XmsgOssCfgPb::n2h() const {
  // @@protoc_insertion_point(field_list:XmsgOssCfgPb.n2h)
  return n2h_;
}

// .XmsgOssCfgMisc misc = 10;
inline bool XmsgOssCfgPb::has_misc() const {
  return this != internal_default_instance() && misc_ != NULL;
}
inline void XmsgOssCfgPb::clear_misc() {
  if (GetArenaNoVirtual() == NULL && misc_ != NULL) {
    delete misc_;
  }
  misc_ = NULL;
}
inline const ::XmsgOssCfgMisc& XmsgOssCfgPb::misc() const {
  const ::XmsgOssCfgMisc* p = misc_;
  // @@protoc_insertion_point(field_get:XmsgOssCfgPb.misc)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgOssCfgMisc*>(
      &::_XmsgOssCfgMisc_default_instance_);
}
inline ::XmsgOssCfgMisc* XmsgOssCfgPb::release_misc() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgPb.misc)
  
  ::XmsgOssCfgMisc* temp = misc_;
  misc_ = NULL;
  return temp;
}
inline ::XmsgOssCfgMisc* XmsgOssCfgPb::mutable_misc() {
  
  if (misc_ == NULL) {
    misc_ = new ::XmsgOssCfgMisc;
  }
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgPb.misc)
  return misc_;
}
inline void XmsgOssCfgPb::set_allocated_misc(::XmsgOssCfgMisc* misc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete misc_;
  }
  if (misc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      misc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, misc, submessage_arena);
    }
    
  } else {
    
  }
  misc_ = misc;
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgPb.misc)
}

// -------------------------------------------------------------------

// XmsgOssCfgMongodb

// string uri = 1;
inline void XmsgOssCfgMongodb::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgOssCfgMongodb::uri() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgMongodb.uri)
  return uri_.GetNoArena();
}
inline void XmsgOssCfgMongodb::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgOssCfgMongodb.uri)
}
#if LANG_CXX11
inline void XmsgOssCfgMongodb::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgOssCfgMongodb.uri)
}
#endif
inline void XmsgOssCfgMongodb::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgOssCfgMongodb.uri)
}
inline void XmsgOssCfgMongodb::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgOssCfgMongodb.uri)
}
inline ::std::string* XmsgOssCfgMongodb::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgMongodb.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgOssCfgMongodb::release_uri() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgMongodb.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgOssCfgMongodb::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgMongodb.uri)
}

// -------------------------------------------------------------------

// XmsgOssCfgMysql

// string host = 1;
inline void XmsgOssCfgMysql::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgOssCfgMysql::host() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgMysql.host)
  return host_.GetNoArena();
}
inline void XmsgOssCfgMysql::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgOssCfgMysql.host)
}
#if LANG_CXX11
inline void XmsgOssCfgMysql::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgOssCfgMysql.host)
}
#endif
inline void XmsgOssCfgMysql::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgOssCfgMysql.host)
}
inline void XmsgOssCfgMysql::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgOssCfgMysql.host)
}
inline ::std::string* XmsgOssCfgMysql::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgMysql.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgOssCfgMysql::release_host() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgMysql.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgOssCfgMysql::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgMysql.host)
}

// uint32 port = 2;
inline void XmsgOssCfgMysql::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 XmsgOssCfgMysql::port() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgMysql.port)
  return port_;
}
inline void XmsgOssCfgMysql::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgMysql.port)
}

// string db = 3;
inline void XmsgOssCfgMysql::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgOssCfgMysql::db() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgMysql.db)
  return db_.GetNoArena();
}
inline void XmsgOssCfgMysql::set_db(const ::std::string& value) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgOssCfgMysql.db)
}
#if LANG_CXX11
inline void XmsgOssCfgMysql::set_db(::std::string&& value) {
  
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgOssCfgMysql.db)
}
#endif
inline void XmsgOssCfgMysql::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgOssCfgMysql.db)
}
inline void XmsgOssCfgMysql::set_db(const char* value, size_t size) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgOssCfgMysql.db)
}
inline ::std::string* XmsgOssCfgMysql::mutable_db() {
  
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgMysql.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgOssCfgMysql::release_db() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgMysql.db)
  
  return db_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgOssCfgMysql::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    
  } else {
    
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgMysql.db)
}

// string usr = 4;
inline void XmsgOssCfgMysql::clear_usr() {
  usr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgOssCfgMysql::usr() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgMysql.usr)
  return usr_.GetNoArena();
}
inline void XmsgOssCfgMysql::set_usr(const ::std::string& value) {
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgOssCfgMysql.usr)
}
#if LANG_CXX11
inline void XmsgOssCfgMysql::set_usr(::std::string&& value) {
  
  usr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgOssCfgMysql.usr)
}
#endif
inline void XmsgOssCfgMysql::set_usr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgOssCfgMysql.usr)
}
inline void XmsgOssCfgMysql::set_usr(const char* value, size_t size) {
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgOssCfgMysql.usr)
}
inline ::std::string* XmsgOssCfgMysql::mutable_usr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgMysql.usr)
  return usr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgOssCfgMysql::release_usr() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgMysql.usr)
  
  return usr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgOssCfgMysql::set_allocated_usr(::std::string* usr) {
  if (usr != NULL) {
    
  } else {
    
  }
  usr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usr);
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgMysql.usr)
}

// string password = 5;
inline void XmsgOssCfgMysql::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgOssCfgMysql::password() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgMysql.password)
  return password_.GetNoArena();
}
inline void XmsgOssCfgMysql::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgOssCfgMysql.password)
}
#if LANG_CXX11
inline void XmsgOssCfgMysql::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgOssCfgMysql.password)
}
#endif
inline void XmsgOssCfgMysql::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgOssCfgMysql.password)
}
inline void XmsgOssCfgMysql::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgOssCfgMysql.password)
}
inline ::std::string* XmsgOssCfgMysql::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgMysql.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgOssCfgMysql::release_password() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgMysql.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgOssCfgMysql::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgMysql.password)
}

// uint32 poolSize = 6;
inline void XmsgOssCfgMysql::clear_poolsize() {
  poolsize_ = 0u;
}
inline ::google::protobuf::uint32 XmsgOssCfgMysql::poolsize() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgMysql.poolSize)
  return poolsize_;
}
inline void XmsgOssCfgMysql::set_poolsize(::google::protobuf::uint32 value) {
  
  poolsize_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgMysql.poolSize)
}

// -------------------------------------------------------------------

// XmsgOssCfgLog

// string level = 1;
inline void XmsgOssCfgLog::clear_level() {
  level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgOssCfgLog::level() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgLog.level)
  return level_.GetNoArena();
}
inline void XmsgOssCfgLog::set_level(const ::std::string& value) {
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgOssCfgLog.level)
}
#if LANG_CXX11
inline void XmsgOssCfgLog::set_level(::std::string&& value) {
  
  level_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgOssCfgLog.level)
}
#endif
inline void XmsgOssCfgLog::set_level(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgOssCfgLog.level)
}
inline void XmsgOssCfgLog::set_level(const char* value, size_t size) {
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgOssCfgLog.level)
}
inline ::std::string* XmsgOssCfgLog::mutable_level() {
  
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgLog.level)
  return level_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgOssCfgLog::release_level() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgLog.level)
  
  return level_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgOssCfgLog::set_allocated_level(::std::string* level) {
  if (level != NULL) {
    
  } else {
    
  }
  level_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level);
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgLog.level)
}

// string output = 2;
inline void XmsgOssCfgLog::clear_output() {
  output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgOssCfgLog::output() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgLog.output)
  return output_.GetNoArena();
}
inline void XmsgOssCfgLog::set_output(const ::std::string& value) {
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgOssCfgLog.output)
}
#if LANG_CXX11
inline void XmsgOssCfgLog::set_output(::std::string&& value) {
  
  output_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgOssCfgLog.output)
}
#endif
inline void XmsgOssCfgLog::set_output(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgOssCfgLog.output)
}
inline void XmsgOssCfgLog::set_output(const char* value, size_t size) {
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgOssCfgLog.output)
}
inline ::std::string* XmsgOssCfgLog::mutable_output() {
  
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgLog.output)
  return output_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgOssCfgLog::release_output() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgLog.output)
  
  return output_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgOssCfgLog::set_allocated_output(::std::string* output) {
  if (output != NULL) {
    
  } else {
    
  }
  output_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output);
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgLog.output)
}

// -------------------------------------------------------------------

// XmsgOssCfgXscTcpServer

// string addr = 1;
inline void XmsgOssCfgXscTcpServer::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgOssCfgXscTcpServer::addr() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXscTcpServer.addr)
  return addr_.GetNoArena();
}
inline void XmsgOssCfgXscTcpServer::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgOssCfgXscTcpServer.addr)
}
#if LANG_CXX11
inline void XmsgOssCfgXscTcpServer::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgOssCfgXscTcpServer.addr)
}
#endif
inline void XmsgOssCfgXscTcpServer::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgOssCfgXscTcpServer.addr)
}
inline void XmsgOssCfgXscTcpServer::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgOssCfgXscTcpServer.addr)
}
inline ::std::string* XmsgOssCfgXscTcpServer::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgXscTcpServer.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgOssCfgXscTcpServer::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgXscTcpServer.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgOssCfgXscTcpServer::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgXscTcpServer.addr)
}

// uint32 worker = 2;
inline void XmsgOssCfgXscTcpServer::clear_worker() {
  worker_ = 0u;
}
inline ::google::protobuf::uint32 XmsgOssCfgXscTcpServer::worker() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXscTcpServer.worker)
  return worker_;
}
inline void XmsgOssCfgXscTcpServer::set_worker(::google::protobuf::uint32 value) {
  
  worker_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgXscTcpServer.worker)
}

// uint32 peerLimit = 3;
inline void XmsgOssCfgXscTcpServer::clear_peerlimit() {
  peerlimit_ = 0u;
}
inline ::google::protobuf::uint32 XmsgOssCfgXscTcpServer::peerlimit() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXscTcpServer.peerLimit)
  return peerlimit_;
}
inline void XmsgOssCfgXscTcpServer::set_peerlimit(::google::protobuf::uint32 value) {
  
  peerlimit_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgXscTcpServer.peerLimit)
}

// uint32 peerMtu = 4;
inline void XmsgOssCfgXscTcpServer::clear_peermtu() {
  peermtu_ = 0u;
}
inline ::google::protobuf::uint32 XmsgOssCfgXscTcpServer::peermtu() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXscTcpServer.peerMtu)
  return peermtu_;
}
inline void XmsgOssCfgXscTcpServer::set_peermtu(::google::protobuf::uint32 value) {
  
  peermtu_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgXscTcpServer.peerMtu)
}

// uint32 peerRcvBuf = 5;
inline void XmsgOssCfgXscTcpServer::clear_peerrcvbuf() {
  peerrcvbuf_ = 0u;
}
inline ::google::protobuf::uint32 XmsgOssCfgXscTcpServer::peerrcvbuf() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXscTcpServer.peerRcvBuf)
  return peerrcvbuf_;
}
inline void XmsgOssCfgXscTcpServer::set_peerrcvbuf(::google::protobuf::uint32 value) {
  
  peerrcvbuf_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgXscTcpServer.peerRcvBuf)
}

// uint32 peerSndBuf = 6;
inline void XmsgOssCfgXscTcpServer::clear_peersndbuf() {
  peersndbuf_ = 0u;
}
inline ::google::protobuf::uint32 XmsgOssCfgXscTcpServer::peersndbuf() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXscTcpServer.peerSndBuf)
  return peersndbuf_;
}
inline void XmsgOssCfgXscTcpServer::set_peersndbuf(::google::protobuf::uint32 value) {
  
  peersndbuf_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgXscTcpServer.peerSndBuf)
}

// uint32 lazyClose = 7;
inline void XmsgOssCfgXscTcpServer::clear_lazyclose() {
  lazyclose_ = 0u;
}
inline ::google::protobuf::uint32 XmsgOssCfgXscTcpServer::lazyclose() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXscTcpServer.lazyClose)
  return lazyclose_;
}
inline void XmsgOssCfgXscTcpServer::set_lazyclose(::google::protobuf::uint32 value) {
  
  lazyclose_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgXscTcpServer.lazyClose)
}

// bool tracing = 8;
inline void XmsgOssCfgXscTcpServer::clear_tracing() {
  tracing_ = false;
}
inline bool XmsgOssCfgXscTcpServer::tracing() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXscTcpServer.tracing)
  return tracing_;
}
inline void XmsgOssCfgXscTcpServer::set_tracing(bool value) {
  
  tracing_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgXscTcpServer.tracing)
}

// uint32 heartbeat = 9;
inline void XmsgOssCfgXscTcpServer::clear_heartbeat() {
  heartbeat_ = 0u;
}
inline ::google::protobuf::uint32 XmsgOssCfgXscTcpServer::heartbeat() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXscTcpServer.heartbeat)
  return heartbeat_;
}
inline void XmsgOssCfgXscTcpServer::set_heartbeat(::google::protobuf::uint32 value) {
  
  heartbeat_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgXscTcpServer.heartbeat)
}

// uint32 n2hZombie = 10;
inline void XmsgOssCfgXscTcpServer::clear_n2hzombie() {
  n2hzombie_ = 0u;
}
inline ::google::protobuf::uint32 XmsgOssCfgXscTcpServer::n2hzombie() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXscTcpServer.n2hZombie)
  return n2hzombie_;
}
inline void XmsgOssCfgXscTcpServer::set_n2hzombie(::google::protobuf::uint32 value) {
  
  n2hzombie_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgXscTcpServer.n2hZombie)
}

// uint32 n2hTransTimeout = 11;
inline void XmsgOssCfgXscTcpServer::clear_n2htranstimeout() {
  n2htranstimeout_ = 0u;
}
inline ::google::protobuf::uint32 XmsgOssCfgXscTcpServer::n2htranstimeout() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXscTcpServer.n2hTransTimeout)
  return n2htranstimeout_;
}
inline void XmsgOssCfgXscTcpServer::set_n2htranstimeout(::google::protobuf::uint32 value) {
  
  n2htranstimeout_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgXscTcpServer.n2hTransTimeout)
}

// bool n2hTracing = 12;
inline void XmsgOssCfgXscTcpServer::clear_n2htracing() {
  n2htracing_ = false;
}
inline bool XmsgOssCfgXscTcpServer::n2htracing() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXscTcpServer.n2hTracing)
  return n2htracing_;
}
inline void XmsgOssCfgXscTcpServer::set_n2htracing(bool value) {
  
  n2htracing_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgXscTcpServer.n2hTracing)
}

// uint32 h2nReConn = 13;
inline void XmsgOssCfgXscTcpServer::clear_h2nreconn() {
  h2nreconn_ = 0u;
}
inline ::google::protobuf::uint32 XmsgOssCfgXscTcpServer::h2nreconn() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXscTcpServer.h2nReConn)
  return h2nreconn_;
}
inline void XmsgOssCfgXscTcpServer::set_h2nreconn(::google::protobuf::uint32 value) {
  
  h2nreconn_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgXscTcpServer.h2nReConn)
}

// uint32 h2nTransTimeout = 14;
inline void XmsgOssCfgXscTcpServer::clear_h2ntranstimeout() {
  h2ntranstimeout_ = 0u;
}
inline ::google::protobuf::uint32 XmsgOssCfgXscTcpServer::h2ntranstimeout() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXscTcpServer.h2nTransTimeout)
  return h2ntranstimeout_;
}
inline void XmsgOssCfgXscTcpServer::set_h2ntranstimeout(::google::protobuf::uint32 value) {
  
  h2ntranstimeout_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgXscTcpServer.h2nTransTimeout)
}

// -------------------------------------------------------------------

// XmsgOssCfgXscHttpServer

// .XmsgOssCfgXscTcpServer tcp = 1;
inline bool XmsgOssCfgXscHttpServer::has_tcp() const {
  return this != internal_default_instance() && tcp_ != NULL;
}
inline void XmsgOssCfgXscHttpServer::clear_tcp() {
  if (GetArenaNoVirtual() == NULL && tcp_ != NULL) {
    delete tcp_;
  }
  tcp_ = NULL;
}
inline const ::XmsgOssCfgXscTcpServer& XmsgOssCfgXscHttpServer::tcp() const {
  const ::XmsgOssCfgXscTcpServer* p = tcp_;
  // @@protoc_insertion_point(field_get:XmsgOssCfgXscHttpServer.tcp)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgOssCfgXscTcpServer*>(
      &::_XmsgOssCfgXscTcpServer_default_instance_);
}
inline ::XmsgOssCfgXscTcpServer* XmsgOssCfgXscHttpServer::release_tcp() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgXscHttpServer.tcp)
  
  ::XmsgOssCfgXscTcpServer* temp = tcp_;
  tcp_ = NULL;
  return temp;
}
inline ::XmsgOssCfgXscTcpServer* XmsgOssCfgXscHttpServer::mutable_tcp() {
  
  if (tcp_ == NULL) {
    tcp_ = new ::XmsgOssCfgXscTcpServer;
  }
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgXscHttpServer.tcp)
  return tcp_;
}
inline void XmsgOssCfgXscHttpServer::set_allocated_tcp(::XmsgOssCfgXscTcpServer* tcp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tcp_;
  }
  if (tcp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tcp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tcp, submessage_arena);
    }
    
  } else {
    
  }
  tcp_ = tcp;
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgXscHttpServer.tcp)
}

// uint32 headerLimit = 2;
inline void XmsgOssCfgXscHttpServer::clear_headerlimit() {
  headerlimit_ = 0u;
}
inline ::google::protobuf::uint32 XmsgOssCfgXscHttpServer::headerlimit() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXscHttpServer.headerLimit)
  return headerlimit_;
}
inline void XmsgOssCfgXscHttpServer::set_headerlimit(::google::protobuf::uint32 value) {
  
  headerlimit_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgXscHttpServer.headerLimit)
}

// uint32 bodyLimit = 3;
inline void XmsgOssCfgXscHttpServer::clear_bodylimit() {
  bodylimit_ = 0u;
}
inline ::google::protobuf::uint32 XmsgOssCfgXscHttpServer::bodylimit() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXscHttpServer.bodyLimit)
  return bodylimit_;
}
inline void XmsgOssCfgXscHttpServer::set_bodylimit(::google::protobuf::uint32 value) {
  
  bodylimit_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgXscHttpServer.bodyLimit)
}

// uint32 closeWait = 4;
inline void XmsgOssCfgXscHttpServer::clear_closewait() {
  closewait_ = 0u;
}
inline ::google::protobuf::uint32 XmsgOssCfgXscHttpServer::closewait() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXscHttpServer.closeWait)
  return closewait_;
}
inline void XmsgOssCfgXscHttpServer::set_closewait(::google::protobuf::uint32 value) {
  
  closewait_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgXscHttpServer.closeWait)
}

// repeated string requiredHeader = 5;
inline int XmsgOssCfgXscHttpServer::requiredheader_size() const {
  return requiredheader_.size();
}
inline void XmsgOssCfgXscHttpServer::clear_requiredheader() {
  requiredheader_.Clear();
}
inline const ::std::string& XmsgOssCfgXscHttpServer::requiredheader(int index) const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXscHttpServer.requiredHeader)
  return requiredheader_.Get(index);
}
inline ::std::string* XmsgOssCfgXscHttpServer::mutable_requiredheader(int index) {
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgXscHttpServer.requiredHeader)
  return requiredheader_.Mutable(index);
}
inline void XmsgOssCfgXscHttpServer::set_requiredheader(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:XmsgOssCfgXscHttpServer.requiredHeader)
  requiredheader_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void XmsgOssCfgXscHttpServer::set_requiredheader(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:XmsgOssCfgXscHttpServer.requiredHeader)
  requiredheader_.Mutable(index)->assign(std::move(value));
}
#endif
inline void XmsgOssCfgXscHttpServer::set_requiredheader(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  requiredheader_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:XmsgOssCfgXscHttpServer.requiredHeader)
}
inline void XmsgOssCfgXscHttpServer::set_requiredheader(int index, const char* value, size_t size) {
  requiredheader_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:XmsgOssCfgXscHttpServer.requiredHeader)
}
inline ::std::string* XmsgOssCfgXscHttpServer::add_requiredheader() {
  // @@protoc_insertion_point(field_add_mutable:XmsgOssCfgXscHttpServer.requiredHeader)
  return requiredheader_.Add();
}
inline void XmsgOssCfgXscHttpServer::add_requiredheader(const ::std::string& value) {
  requiredheader_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:XmsgOssCfgXscHttpServer.requiredHeader)
}
#if LANG_CXX11
inline void XmsgOssCfgXscHttpServer::add_requiredheader(::std::string&& value) {
  requiredheader_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:XmsgOssCfgXscHttpServer.requiredHeader)
}
#endif
inline void XmsgOssCfgXscHttpServer::add_requiredheader(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  requiredheader_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:XmsgOssCfgXscHttpServer.requiredHeader)
}
inline void XmsgOssCfgXscHttpServer::add_requiredheader(const char* value, size_t size) {
  requiredheader_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:XmsgOssCfgXscHttpServer.requiredHeader)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
XmsgOssCfgXscHttpServer::requiredheader() const {
  // @@protoc_insertion_point(field_list:XmsgOssCfgXscHttpServer.requiredHeader)
  return requiredheader_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
XmsgOssCfgXscHttpServer::mutable_requiredheader() {
  // @@protoc_insertion_point(field_mutable_list:XmsgOssCfgXscHttpServer.requiredHeader)
  return &requiredheader_;
}

// -------------------------------------------------------------------

// XmsgOssCfgXmsgNeH2nAddr

// string neg = 1;
inline void XmsgOssCfgXmsgNeH2nAddr::clear_neg() {
  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgOssCfgXmsgNeH2nAddr::neg() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXmsgNeH2nAddr.neg)
  return neg_.GetNoArena();
}
inline void XmsgOssCfgXmsgNeH2nAddr::set_neg(const ::std::string& value) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgOssCfgXmsgNeH2nAddr.neg)
}
#if LANG_CXX11
inline void XmsgOssCfgXmsgNeH2nAddr::set_neg(::std::string&& value) {
  
  neg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgOssCfgXmsgNeH2nAddr.neg)
}
#endif
inline void XmsgOssCfgXmsgNeH2nAddr::set_neg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgOssCfgXmsgNeH2nAddr.neg)
}
inline void XmsgOssCfgXmsgNeH2nAddr::set_neg(const char* value, size_t size) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgOssCfgXmsgNeH2nAddr.neg)
}
inline ::std::string* XmsgOssCfgXmsgNeH2nAddr::mutable_neg() {
  
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgXmsgNeH2nAddr.neg)
  return neg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgOssCfgXmsgNeH2nAddr::release_neg() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgXmsgNeH2nAddr.neg)
  
  return neg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgOssCfgXmsgNeH2nAddr::set_allocated_neg(::std::string* neg) {
  if (neg != NULL) {
    
  } else {
    
  }
  neg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neg);
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgXmsgNeH2nAddr.neg)
}

// string addr = 2;
inline void XmsgOssCfgXmsgNeH2nAddr::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgOssCfgXmsgNeH2nAddr::addr() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXmsgNeH2nAddr.addr)
  return addr_.GetNoArena();
}
inline void XmsgOssCfgXmsgNeH2nAddr::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgOssCfgXmsgNeH2nAddr.addr)
}
#if LANG_CXX11
inline void XmsgOssCfgXmsgNeH2nAddr::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgOssCfgXmsgNeH2nAddr.addr)
}
#endif
inline void XmsgOssCfgXmsgNeH2nAddr::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgOssCfgXmsgNeH2nAddr.addr)
}
inline void XmsgOssCfgXmsgNeH2nAddr::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgOssCfgXmsgNeH2nAddr.addr)
}
inline ::std::string* XmsgOssCfgXmsgNeH2nAddr::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgXmsgNeH2nAddr.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgOssCfgXmsgNeH2nAddr::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgXmsgNeH2nAddr.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgOssCfgXmsgNeH2nAddr::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgXmsgNeH2nAddr.addr)
}

// string pwd = 3;
inline void XmsgOssCfgXmsgNeH2nAddr::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgOssCfgXmsgNeH2nAddr::pwd() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXmsgNeH2nAddr.pwd)
  return pwd_.GetNoArena();
}
inline void XmsgOssCfgXmsgNeH2nAddr::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgOssCfgXmsgNeH2nAddr.pwd)
}
#if LANG_CXX11
inline void XmsgOssCfgXmsgNeH2nAddr::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgOssCfgXmsgNeH2nAddr.pwd)
}
#endif
inline void XmsgOssCfgXmsgNeH2nAddr::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgOssCfgXmsgNeH2nAddr.pwd)
}
inline void XmsgOssCfgXmsgNeH2nAddr::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgOssCfgXmsgNeH2nAddr.pwd)
}
inline ::std::string* XmsgOssCfgXmsgNeH2nAddr::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgXmsgNeH2nAddr.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgOssCfgXmsgNeH2nAddr::release_pwd() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgXmsgNeH2nAddr.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgOssCfgXmsgNeH2nAddr::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgXmsgNeH2nAddr.pwd)
}

// string alg = 4;
inline void XmsgOssCfgXmsgNeH2nAddr::clear_alg() {
  alg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgOssCfgXmsgNeH2nAddr::alg() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXmsgNeH2nAddr.alg)
  return alg_.GetNoArena();
}
inline void XmsgOssCfgXmsgNeH2nAddr::set_alg(const ::std::string& value) {
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgOssCfgXmsgNeH2nAddr.alg)
}
#if LANG_CXX11
inline void XmsgOssCfgXmsgNeH2nAddr::set_alg(::std::string&& value) {
  
  alg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgOssCfgXmsgNeH2nAddr.alg)
}
#endif
inline void XmsgOssCfgXmsgNeH2nAddr::set_alg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgOssCfgXmsgNeH2nAddr.alg)
}
inline void XmsgOssCfgXmsgNeH2nAddr::set_alg(const char* value, size_t size) {
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgOssCfgXmsgNeH2nAddr.alg)
}
inline ::std::string* XmsgOssCfgXmsgNeH2nAddr::mutable_alg() {
  
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgXmsgNeH2nAddr.alg)
  return alg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgOssCfgXmsgNeH2nAddr::release_alg() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgXmsgNeH2nAddr.alg)
  
  return alg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgOssCfgXmsgNeH2nAddr::set_allocated_alg(::std::string* alg) {
  if (alg != NULL) {
    
  } else {
    
  }
  alg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alg);
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgXmsgNeH2nAddr.alg)
}

// uint32 redundant = 5;
inline void XmsgOssCfgXmsgNeH2nAddr::clear_redundant() {
  redundant_ = 0u;
}
inline ::google::protobuf::uint32 XmsgOssCfgXmsgNeH2nAddr::redundant() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXmsgNeH2nAddr.redundant)
  return redundant_;
}
inline void XmsgOssCfgXmsgNeH2nAddr::set_redundant(::google::protobuf::uint32 value) {
  
  redundant_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgXmsgNeH2nAddr.redundant)
}

// -------------------------------------------------------------------

// XmsgOssCfgXmsgNeN2hAddr

// string neg = 1;
inline void XmsgOssCfgXmsgNeN2hAddr::clear_neg() {
  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgOssCfgXmsgNeN2hAddr::neg() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXmsgNeN2hAddr.neg)
  return neg_.GetNoArena();
}
inline void XmsgOssCfgXmsgNeN2hAddr::set_neg(const ::std::string& value) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgOssCfgXmsgNeN2hAddr.neg)
}
#if LANG_CXX11
inline void XmsgOssCfgXmsgNeN2hAddr::set_neg(::std::string&& value) {
  
  neg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgOssCfgXmsgNeN2hAddr.neg)
}
#endif
inline void XmsgOssCfgXmsgNeN2hAddr::set_neg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgOssCfgXmsgNeN2hAddr.neg)
}
inline void XmsgOssCfgXmsgNeN2hAddr::set_neg(const char* value, size_t size) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgOssCfgXmsgNeN2hAddr.neg)
}
inline ::std::string* XmsgOssCfgXmsgNeN2hAddr::mutable_neg() {
  
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgXmsgNeN2hAddr.neg)
  return neg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgOssCfgXmsgNeN2hAddr::release_neg() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgXmsgNeN2hAddr.neg)
  
  return neg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgOssCfgXmsgNeN2hAddr::set_allocated_neg(::std::string* neg) {
  if (neg != NULL) {
    
  } else {
    
  }
  neg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neg);
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgXmsgNeN2hAddr.neg)
}

// string cgt = 2;
inline void XmsgOssCfgXmsgNeN2hAddr::clear_cgt() {
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgOssCfgXmsgNeN2hAddr::cgt() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXmsgNeN2hAddr.cgt)
  return cgt_.GetNoArena();
}
inline void XmsgOssCfgXmsgNeN2hAddr::set_cgt(const ::std::string& value) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgOssCfgXmsgNeN2hAddr.cgt)
}
#if LANG_CXX11
inline void XmsgOssCfgXmsgNeN2hAddr::set_cgt(::std::string&& value) {
  
  cgt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgOssCfgXmsgNeN2hAddr.cgt)
}
#endif
inline void XmsgOssCfgXmsgNeN2hAddr::set_cgt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgOssCfgXmsgNeN2hAddr.cgt)
}
inline void XmsgOssCfgXmsgNeN2hAddr::set_cgt(const char* value, size_t size) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgOssCfgXmsgNeN2hAddr.cgt)
}
inline ::std::string* XmsgOssCfgXmsgNeN2hAddr::mutable_cgt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgXmsgNeN2hAddr.cgt)
  return cgt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgOssCfgXmsgNeN2hAddr::release_cgt() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgXmsgNeN2hAddr.cgt)
  
  return cgt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgOssCfgXmsgNeN2hAddr::set_allocated_cgt(::std::string* cgt) {
  if (cgt != NULL) {
    
  } else {
    
  }
  cgt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cgt);
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgXmsgNeN2hAddr.cgt)
}

// string pwd = 3;
inline void XmsgOssCfgXmsgNeN2hAddr::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgOssCfgXmsgNeN2hAddr::pwd() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXmsgNeN2hAddr.pwd)
  return pwd_.GetNoArena();
}
inline void XmsgOssCfgXmsgNeN2hAddr::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgOssCfgXmsgNeN2hAddr.pwd)
}
#if LANG_CXX11
inline void XmsgOssCfgXmsgNeN2hAddr::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgOssCfgXmsgNeN2hAddr.pwd)
}
#endif
inline void XmsgOssCfgXmsgNeN2hAddr::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgOssCfgXmsgNeN2hAddr.pwd)
}
inline void XmsgOssCfgXmsgNeN2hAddr::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgOssCfgXmsgNeN2hAddr.pwd)
}
inline ::std::string* XmsgOssCfgXmsgNeN2hAddr::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgXmsgNeN2hAddr.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgOssCfgXmsgNeN2hAddr::release_pwd() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgXmsgNeN2hAddr.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgOssCfgXmsgNeN2hAddr::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgXmsgNeN2hAddr.pwd)
}

// string addr = 4;
inline void XmsgOssCfgXmsgNeN2hAddr::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgOssCfgXmsgNeN2hAddr::addr() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgXmsgNeN2hAddr.addr)
  return addr_.GetNoArena();
}
inline void XmsgOssCfgXmsgNeN2hAddr::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgOssCfgXmsgNeN2hAddr.addr)
}
#if LANG_CXX11
inline void XmsgOssCfgXmsgNeN2hAddr::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgOssCfgXmsgNeN2hAddr.addr)
}
#endif
inline void XmsgOssCfgXmsgNeN2hAddr::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgOssCfgXmsgNeN2hAddr.addr)
}
inline void XmsgOssCfgXmsgNeN2hAddr::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgOssCfgXmsgNeN2hAddr.addr)
}
inline ::std::string* XmsgOssCfgXmsgNeN2hAddr::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgXmsgNeN2hAddr.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgOssCfgXmsgNeN2hAddr::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgXmsgNeN2hAddr.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgOssCfgXmsgNeN2hAddr::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgXmsgNeN2hAddr.addr)
}

// -------------------------------------------------------------------

// XmsgOssCfgMisc

// .XmsgOssStorageType storage = 7;
inline void XmsgOssCfgMisc::clear_storage() {
  storage_ = 0;
}
inline ::XmsgOssStorageType XmsgOssCfgMisc::storage() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgMisc.storage)
  return static_cast< ::XmsgOssStorageType >(storage_);
}
inline void XmsgOssCfgMisc::set_storage(::XmsgOssStorageType value) {
  
  storage_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgMisc.storage)
}

// string ipfsNode = 8;
inline void XmsgOssCfgMisc::clear_ipfsnode() {
  ipfsnode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgOssCfgMisc::ipfsnode() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgMisc.ipfsNode)
  return ipfsnode_.GetNoArena();
}
inline void XmsgOssCfgMisc::set_ipfsnode(const ::std::string& value) {
  
  ipfsnode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgOssCfgMisc.ipfsNode)
}
#if LANG_CXX11
inline void XmsgOssCfgMisc::set_ipfsnode(::std::string&& value) {
  
  ipfsnode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgOssCfgMisc.ipfsNode)
}
#endif
inline void XmsgOssCfgMisc::set_ipfsnode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ipfsnode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgOssCfgMisc.ipfsNode)
}
inline void XmsgOssCfgMisc::set_ipfsnode(const char* value, size_t size) {
  
  ipfsnode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgOssCfgMisc.ipfsNode)
}
inline ::std::string* XmsgOssCfgMisc::mutable_ipfsnode() {
  
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgMisc.ipfsNode)
  return ipfsnode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgOssCfgMisc::release_ipfsnode() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgMisc.ipfsNode)
  
  return ipfsnode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgOssCfgMisc::set_allocated_ipfsnode(::std::string* ipfsnode) {
  if (ipfsnode != NULL) {
    
  } else {
    
  }
  ipfsnode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipfsnode);
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgMisc.ipfsNode)
}

// uint32 ipfsUploadThread = 9;
inline void XmsgOssCfgMisc::clear_ipfsuploadthread() {
  ipfsuploadthread_ = 0u;
}
inline ::google::protobuf::uint32 XmsgOssCfgMisc::ipfsuploadthread() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgMisc.ipfsUploadThread)
  return ipfsuploadthread_;
}
inline void XmsgOssCfgMisc::set_ipfsuploadthread(::google::protobuf::uint32 value) {
  
  ipfsuploadthread_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgMisc.ipfsUploadThread)
}

// uint32 ipfsDownloadThread = 10;
inline void XmsgOssCfgMisc::clear_ipfsdownloadthread() {
  ipfsdownloadthread_ = 0u;
}
inline ::google::protobuf::uint32 XmsgOssCfgMisc::ipfsdownloadthread() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgMisc.ipfsDownloadThread)
  return ipfsdownloadthread_;
}
inline void XmsgOssCfgMisc::set_ipfsdownloadthread(::google::protobuf::uint32 value) {
  
  ipfsdownloadthread_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgMisc.ipfsDownloadThread)
}

// string objPath = 1;
inline void XmsgOssCfgMisc::clear_objpath() {
  objpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgOssCfgMisc::objpath() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgMisc.objPath)
  return objpath_.GetNoArena();
}
inline void XmsgOssCfgMisc::set_objpath(const ::std::string& value) {
  
  objpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgOssCfgMisc.objPath)
}
#if LANG_CXX11
inline void XmsgOssCfgMisc::set_objpath(::std::string&& value) {
  
  objpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgOssCfgMisc.objPath)
}
#endif
inline void XmsgOssCfgMisc::set_objpath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  objpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgOssCfgMisc.objPath)
}
inline void XmsgOssCfgMisc::set_objpath(const char* value, size_t size) {
  
  objpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgOssCfgMisc.objPath)
}
inline ::std::string* XmsgOssCfgMisc::mutable_objpath() {
  
  // @@protoc_insertion_point(field_mutable:XmsgOssCfgMisc.objPath)
  return objpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgOssCfgMisc::release_objpath() {
  // @@protoc_insertion_point(field_release:XmsgOssCfgMisc.objPath)
  
  return objpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgOssCfgMisc::set_allocated_objpath(::std::string* objpath) {
  if (objpath != NULL) {
    
  } else {
    
  }
  objpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), objpath);
  // @@protoc_insertion_point(field_set_allocated:XmsgOssCfgMisc.objPath)
}

// uint32 objHashSegment = 2;
inline void XmsgOssCfgMisc::clear_objhashsegment() {
  objhashsegment_ = 0u;
}
inline ::google::protobuf::uint32 XmsgOssCfgMisc::objhashsegment() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgMisc.objHashSegment)
  return objhashsegment_;
}
inline void XmsgOssCfgMisc::set_objhashsegment(::google::protobuf::uint32 value) {
  
  objhashsegment_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgMisc.objHashSegment)
}

// uint32 objDownloadThread = 3;
inline void XmsgOssCfgMisc::clear_objdownloadthread() {
  objdownloadthread_ = 0u;
}
inline ::google::protobuf::uint32 XmsgOssCfgMisc::objdownloadthread() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgMisc.objDownloadThread)
  return objdownloadthread_;
}
inline void XmsgOssCfgMisc::set_objdownloadthread(::google::protobuf::uint32 value) {
  
  objdownloadthread_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgMisc.objDownloadThread)
}

// uint32 objDownloadWriteBufSize = 6;
inline void XmsgOssCfgMisc::clear_objdownloadwritebufsize() {
  objdownloadwritebufsize_ = 0u;
}
inline ::google::protobuf::uint32 XmsgOssCfgMisc::objdownloadwritebufsize() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgMisc.objDownloadWriteBufSize)
  return objdownloadwritebufsize_;
}
inline void XmsgOssCfgMisc::set_objdownloadwritebufsize(::google::protobuf::uint32 value) {
  
  objdownloadwritebufsize_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgMisc.objDownloadWriteBufSize)
}

// uint32 objInfoCached = 4;
inline void XmsgOssCfgMisc::clear_objinfocached() {
  objinfocached_ = 0u;
}
inline ::google::protobuf::uint32 XmsgOssCfgMisc::objinfocached() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgMisc.objInfoCached)
  return objinfocached_;
}
inline void XmsgOssCfgMisc::set_objinfocached(::google::protobuf::uint32 value) {
  
  objinfocached_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgMisc.objInfoCached)
}

// uint32 objInfoLru = 5;
inline void XmsgOssCfgMisc::clear_objinfolru() {
  objinfolru_ = 0u;
}
inline ::google::protobuf::uint32 XmsgOssCfgMisc::objinfolru() const {
  // @@protoc_insertion_point(field_get:XmsgOssCfgMisc.objInfoLru)
  return objinfolru_;
}
inline void XmsgOssCfgMisc::set_objinfolru(::google::protobuf::uint32 value) {
  
  objinfolru_ = value;
  // @@protoc_insertion_point(field_set:XmsgOssCfgMisc.objInfoLru)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::XmsgOssStorageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XmsgOssStorageType>() {
  return ::XmsgOssStorageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cfg_2dx_2dmsg_2doss_2eproto__INCLUDED
